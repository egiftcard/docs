{
  "": [
    {
      "name": "useAcceptDirectListingOffer",
      "summary": "Accept a specific offer on a direct listing\n\n",
      "remarks": "\n\nwill accept the latest offer by the given offeror.\n\n",
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: acceptOffer,\n    isLoading,\n    error,\n  } = useAcceptDirectListingOffer(contract);\n\n  if (error) {\n    console.error(\"failed to accept offer\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => acceptOffer({ listingId: 1, addressOfOfferor: \"{{wallet_address}}\" })}\n    >\n      Accept offer\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useacceptdirectlistingoffer"
      }
    },
    {
      "name": "useActiveListings",
      "summary": "Get all active listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: listings, isLoading, error } = useActiveListings(contract, { seller: \"{{wallet_adress}}\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactivelistings"
      }
    },
    {
      "name": "useAddress",
      "summary": "Hook for accessing the address of the connected wallet\n```javascript\nimport { useAddress } from \"@thirdweb-dev/react\"\n```\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useAddress } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const address = useAddress()\n\n  return <div>{address}</div>\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useaddress"
      }
    },
    {
      "name": "useBuyNow",
      "summary": "Buy out an auction listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyNow(contract);\n\n  if (error) {\n    console.error(\"failed to buyout listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n    >\n      Buy listing!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usebuynow"
      }
    },
    {
      "name": "useCancelListing",
      "summary": "Cancel a listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelListing,\n    isLoading,\n    error,\n  } = useCancelListing(contract);\n\n  if (error) {\n    console.error(\"failed to cancel auction listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelListing}\n    >\n      Cancel Auction Listing!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecancellisting"
      }
    },
    {
      "name": "useChainId",
      "summary": "Hook for accessing the chain ID of the network the current wallet is connected to\n```javascript\nimport { useChainId } from \"@thirdweb-dev/react\"\n```\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useChainId } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const chainId = useChainId()\n\n  return <div>{chainId}</div>\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usechainid"
      }
    },
    {
      "name": "useContract",
      "summary": "Use this resolve a contract address to a smart contract instance.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontract"
      }
    },
    {
      "name": "useContract",
      "summary": "Use this resolve a contract address to a smart contract instance.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\", \"nft-drop\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontract"
      }
    },
    {
      "name": "useContract",
      "summary": "Use this resolve a contract address to a smart contract instance.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\", ABI);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontract"
      }
    },
    {
      "name": "useContractEvents",
      "summary": "Get or subscribe to contract events\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: contractEvents, isLoading } = useContractEvents(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontractevents"
      }
    },
    {
      "name": "useContractRead",
      "summary": "Get data from a contract read-function call\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data, isLoading, error } = useContractRead(contract, \"functionName\", ...args);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontractread"
      }
    },
    {
      "name": "useContractWrite",
      "summary": "Mke a write call to your contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { mutate: myFunction, isLoading, error } = useContractWrite(contract, \"myFunction\");\n\n// the function can be called as follows:\n// myFunction([\"param 1\", \"param 2\", ...])"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontractwrite"
      }
    },
    {
      "name": "useEdition",
      "summary": "Hook for getting an instance of an `Edition` contract. This contract is used to interface with ERC1155 compliant NFTs.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition\")\n\n  // Now you can use the edition contract in the rest of the component\n\n  // For example, this function will return all the NFTs on this contract\n  async function getNFTs() {\n    const nfts = await contract.getAll()\n    return nfts\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useedition"
      }
    },
    {
      "name": "useEditionDrop",
      "summary": "Hook for getting an instance of an `EditionDrop` contract. This conract is used to interface with ERC1155 compliant NFTs that can be lazily minted.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition-drop\")\n\n  // Now you can use the edition drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(tokenId, quantity) {\n    await contract.claim(tokenId, quantity)\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useeditiondrop"
      }
    },
    {
      "name": "useExecuteAuctionSale",
      "summary": "Execute an auction sale. Can only be executed once the auction has ended and the auction has a winning bid.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: executeAuctionSale,\n    isLoading,\n    error,\n  } = useExecuteAuctionSale(contract);\n\n  if (error) {\n    console.error(\"failed to execute sale\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => executeAuctionSale({ listingId: 1 })}\n    >\n      Execute sale\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useexecuteauctionsale"
      }
    },
    {
      "name": "useListing",
      "summary": "Get a listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0; // the listing id to check\nconst { data: listing, isLoading, error } = useListing(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.uselisting"
      }
    },
    {
      "name": "useListings",
      "summary": "Get all listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: listings, isLoading, error } = useListings(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.uselistings"
      }
    },
    {
      "name": "useListingsCount",
      "summary": "Get the total count of listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: listingsCount, isLoading, error } = useListingsCount(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.uselistingscount"
      }
    },
    {
      "name": "useMakeBid",
      "summary": "Make a bid on an auction listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: makeBid,\n    isLoading,\n    error,\n  } = useMakeBid(contract);\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeBid({ listingId: 1, bid: 2 })}\n    >\n      Bid!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemakebid"
      }
    },
    {
      "name": "useMakeOffer",
      "summary": "Nake an offer on a direct or auction listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: makeOffer,\n    isLoading,\n    error,\n  } = useMakeOffer(contract);\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeOffer({ listingId: 1, pricePerToken: 0.5, quantity: 1 })}\n    >\n      Bid!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemakeoffer"
      }
    },
    {
      "name": "useMarketplace",
      "summary": "Hook for getting an instance of a `Marketplace` contract. This contract is used to support marketplace for purchase and sale of on-chain assets.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"marketplace\")\n\n  // Now you can use the marketplace contract in the rest of the component\n\n  // For example, this function will return all the listings on the marketplace\n  async function getListings() {\n    const listings = await contract.getAll()\n    return listings\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemarketplace"
      }
    },
    {
      "name": "useMetadata",
      "summary": "Get the metadata of this contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: metadata, isLoading, error } = useMetadata(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemetadata"
      }
    },
    {
      "name": "useMultiwrap",
      "summary": "Hook for getting an instance of an `Multiwrap` contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"multiwrap\")\n\n  // Now you can use the multiwrap contract in the rest of the component\n\n  // For example, this function will let the connected wallet wrap tokens\n  async function wrap(tokensToWrap, wrappedNFTMetadata) {\n    await contract.wrap(tokensToWrap, wrappedNFTMetadata)\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemultiwrap"
      }
    },
    {
      "name": "useNetworkMismatch",
      "summary": "Hook for checking whether the connected wallet is on the correct network specified by the `network` passed to the `<ThirdwebProvider />`.\n```javascript\nimport { useNetworkMistmatch } from \"@thirdweb-dev/react\"\n```\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const isMismatched = useNetworkMismatch()\n\n  return <div>{isMismatched}</div>\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenetworkmismatch"
      }
    },
    {
      "name": "useNFTCollection",
      "summary": "Hook for getting an instance of an `NFTCollection` contract. This contract is meant to interface with ERC721 compliant NFTs.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract, isLoading, error } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-collection\")\n\n  // Now you can use the nftCollection contract in the rest of the component\n\n  // For example, this function will return all the NFTs on this contract\n  async function getNFTs() {\n    const nfts = await contract.getAll()\n    return nfts\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenftcollection"
      }
    },
    {
      "name": "useNFTDrop",
      "summary": "Hook for getting an instance of an `NFTDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-drop\")\n\n  // Now you can use the nft drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(quantity) {\n    await contract.claim(quantity)\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenftdrop"
      }
    },
    {
      "name": "useOffers",
      "summary": "Get all the offers for a listing\n\n",
      "remarks": "\n\nFetch all the offers for a specified direct or auction listing.\n\n",
      "examples": {
        "javascript": "const listingId = 0;\nconst { data: offers, isLoading, error } = useOffers(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useoffers"
      }
    },
    {
      "name": "usePack",
      "summary": "Hook for getting an instance of a `Pack` contract. This contract supports the creation of on-chain luck-based lootboxes.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = usePack(\"<YOUR-CONTRACT-ADDRESS>\", \"pack\")\n\n  // Now you can use the pack contract in the rest of the component\n\n  // For example, this function will get all the packs on this contract\n  async function getPacks() {\n    const packs = await contract.getAll()\n    return packs\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usepack"
      }
    },
    {
      "name": "useSDK",
      "summary": "",
      "remarks": null,
      "examples": {
        "javascript": "const sdk = useSDK();"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesdk"
      }
    },
    {
      "name": "useSignatureDrop",
      "summary": "Hook for getting an instance of an `SignatureDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"signature-drop\")\n\n  // Now you can use the Signature drop contract in the rest of the component\n\n  // For example, this function will let the connected wallet claim a new NFT\n  async function claim(quantity) {\n    await contract.claim(quantity)\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesignaturedrop"
      }
    },
    {
      "name": "useSplit",
      "summary": "Hook for getting an instance of a `Split` contract. This contract supports fund distribution to multiple parties.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"split\")\n\n  // Now you can use the split contract in the rest of the component\n\n  // For example, this function will retrun all the receipients of the split\n  async function getRecipients() {\n    const recipients = await contract.getAllRecipients()\n    return recipients\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesplit"
      }
    },
    {
      "name": "useStorageUpload",
      "summary": "Hook used to upload any files or JSON data to decentralized storage systems like IPFS, using the `storageInterface` configured on the `ThirdwebProvider`\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useStorageUpload } from \"@thirdweb-dev/react\";\n\nexport default function Component() {\n  const { mutateAsync: upload, isLoading } = useStorageUpload();\n\n  async function uploadData() {\n    const filesToUpload = [...];\n    const uris = await upload({ data: files });\n    console.log(uris);\n  }\n\n  return (\n    <button onClick={uploadData}>\n      Upload\n    </button>\n  )\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usestorageupload"
      }
    },
    {
      "name": "useToken",
      "summary": "Hook for getting an instance of a `Token` contract. This contract supports ERC20 compliant tokens.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token\")\n\n  // Now you can use the token contract in the rest of the component\n\n  // For example, this function will get the connected wallets token balance\n  async function balance() {\n    const balance = await contract.balance()\n    return balance\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetoken"
      }
    },
    {
      "name": "useTokenDrop",
      "summary": "Hook for getting an instance of a `Token Drop` contract.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token-drop\")\n\n  // Now you can use the token drop contract in the rest of the component\n\n  // For example, this function will get the connected wallets token balance\n  async function balance() {\n    const balance = await contract.balance()\n    return balance\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetokendrop"
      }
    },
    {
      "name": "useUpdateMetadata",
      "summary": "Set the metadata of this contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateMetadata,\n    isLoading,\n    error,\n  } = useUpdateMetadata(contract);\n\n  if (error) {\n    console.error(\"failed to update metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateMetadata({\n       name: \"My Contract\",\n       description: \"This is my contract\"\n      })}\n    >\n      Update Contract Metadata\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useupdatemetadata"
      }
    },
    {
      "name": "useVote",
      "summary": "Hook for getting an instance of an `Vote` contract. This contract enables fully featured voting-based decentralized governance systems.\n\n",
      "remarks": null,
      "examples": {
        "javascript": "import { useContract } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"vote\")\n\n  // Now you can use the vote contract in the rest of the component\n\n  // For example, this function will get all the proposals on this contract\n  async function getProposals() {\n    const proposals = await contract.getAll()\n    return proposals\n  }\n\n  ...\n}"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usevote"
      }
    },
    {
      "name": "useWinningBid",
      "summary": "Get the winning bid for an auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0;\nconst { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usewinningbid"
      }
    }
  ],
  "ERC20ClaimPhasesV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useClaimToken",
      "summary": "Claim tokens to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(contract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimtoken"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC20ClaimPhasesV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useClaimToken",
      "summary": "Claim tokens to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(contract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimtoken"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC20ClaimConditionsV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useClaimToken",
      "summary": "Claim tokens to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(contract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimtoken"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC20ClaimConditionsV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useClaimToken",
      "summary": "Claim tokens to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimTokens,\n    isLoading,\n    error,\n  } = useClaimToken(contract);\n\n  if (error) {\n    console.error(\"failed to claim tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n    >\n      Claim Tokens!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimtoken"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC721ClaimPhasesV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC721ClaimPhasesV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC721ClaimConditionsV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC721ClaimConditionsV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC1155ClaimPhasesV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC1155ClaimPhasesV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC1155ClaimConditionsV2": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC1155ClaimConditionsV1": [
    {
      "name": "useActiveClaimCondition",
      "summary": "Get the active claim condition\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimcondition"
      }
    },
    {
      "name": "useActiveClaimConditionForWallet",
      "summary": "Get the active claim condition for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useactiveclaimconditionforwallet"
      }
    },
    {
      "name": "useClaimConditions",
      "summary": "Get all claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimConditions, isLoading, error } = useClaimConditions(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimconditions"
      }
    },
    {
      "name": "useClaimerProofs",
      "summary": "Get claimer proofs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimerproofs"
      }
    },
    {
      "name": "useClaimIneligibilityReasons",
      "summary": "Get the reasons why a specific wallet can't claim\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimineligibilityreasons"
      }
    },
    {
      "name": "useResetClaimConditions",
      "summary": "Reset claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: resetClaimConditions,\n    isLoading,\n    error,\n  } = useResetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to reset claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={resetClaimConditions}\n    >\n      Reset Claim Conditions\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useresetclaimconditions"
      }
    },
    {
      "name": "useSetClaimConditions",
      "summary": "Set claim conditions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: setClaimConditions,\n    isLoading,\n    error,\n  } = useSetClaimConditions(contract);\n\n  if (error) {\n    console.error(\"failed to set claim conditions\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n    >\n      Set Claim Conditions!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetclaimconditions"
      }
    }
  ],
  "ERC1155": [
    {
      "name": "useAirdropNFT",
      "summary": "Airdrop NFTs to a list of wallets\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: airdropNFT,\n    isLoading,\n    error,\n  } = useAirdropNFT(contract);\n\n  if (error) {\n    console.error(\"failed to transfer batch NFTs\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => airdropNFT({\n         tokenId: 2,\n         addresses: [\n           { address: \"{{wallet_address}}\", quantity: 2 },\n           { address: \"{{wallet_address}}\", quantity: 4 } }\n         ]\n      )}\n    >\n      Airdrop NFT\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useairdropnft"
      }
    },
    {
      "name": "useNFT",
      "summary": "Get a single NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const tokenId = 0; // the tokenId to look up\nconst { data: nft, isLoading, error } = useNFT(contract, tokenId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenft"
      }
    },
    {
      "name": "useNFTBalance",
      "summary": "Get NFT balance of a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\");\n// for ERC1155 contracts, you can also pass a tokenId\nconst tokenId = 0;\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\", tokenId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenftbalance"
      }
    },
    {
      "name": "useTransferNFT",
      "summary": "Transfer an NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferNFT,\n    isLoading,\n    error,\n  } = useTransferNFT(contract);\n\n  if (error) {\n    console.error(\"failed to transfer NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferNFT({\n        to: \"{{wallet_address}}\",\n        tokenId: 2\n      })}\n    >\n      Transfer\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetransfernft"
      }
    }
  ],
  "PermissionsEnumerable": [
    {
      "name": "useAllRoleMembers",
      "summary": "Get all members of all roles\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: roles, isLoading, error } = useAllRoleMembers(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useallrolemembers"
      }
    },
    {
      "name": "useGrantRole",
      "summary": "Grant a role to a specific address\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: grantRole,\n    isLoading,\n    error,\n  } = useGrantRole(contract);\n\n  if (error) {\n    console.error(\"failed to grant role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => grantRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Grant Role\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usegrantrole"
      }
    },
    {
      "name": "useIsAddressRole",
      "summary": "Check if an address is a member of a specific role\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: isMember, isLoading, error } = useIsAddressRole(contract, \"admin\", \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useisaddressrole"
      }
    },
    {
      "name": "useRevokeRole",
      "summary": "Revoke a role from a specific address\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revokeRole,\n    isLoading,\n    error,\n  } = useRevokeRole(contract);\n\n  if (error) {\n    console.error(\"failed to revoke role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revokeRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Revoke Role\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.userevokerole"
      }
    }
  ],
  "AppURI": [
    {
      "name": "useAppURI",
      "summary": "Get App URI\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: contractMetadata, isLoading, error } = useAppURI(SmartContract;"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useappuri"
      }
    },
    {
      "name": "useSetAppURI",
      "summary": "Set App URI\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const {\n    mutate: useSetAppURI,\n    isLoading,\n    error,\n  } = useSetAppURI(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update appURI\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => useSetAppURI({ uri })}\n    >\n      Update App URI\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetappuri"
      }
    }
  ],
  "ContractMetadata": [
    {
      "name": "useAppURI",
      "summary": "Get App URI\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: contractMetadata, isLoading, error } = useAppURI(SmartContract;"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useappuri"
      }
    },
    {
      "name": "useContractMetadata",
      "summary": "Get the metadata of this contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: contractMetadata, isLoading } = useContractMetadata(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontractmetadata"
      }
    },
    {
      "name": "useContractMetadataUpdate",
      "summary": "Update the metadata of this contract\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateContractMetadata,\n    isLoading,\n    error,\n  } = useContractMetadataUpdate(contract);\n\n  if (error) {\n    console.error(\"failed to update contract metadata\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n    >\n      Update contract metadata\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecontractmetadataupdate"
      }
    },
    {
      "name": "useSetAppURI",
      "summary": "Set App URI\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const {\n    mutate: useSetAppURI,\n    isLoading,\n    error,\n  } = useSetAppURI(SmartContract);\n\n  if (error) {\n    console.error(\"failed to update appURI\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => useSetAppURI({ uri })}\n    >\n      Update App URI\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetappuri"
      }
    }
  ],
  "EnglishAuctions": [
    {
      "name": "useAuctionWinner",
      "summary": "Get the winner of an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0;\nconst { data: auctionWinner, isLoading, error } = useAuctionWinner(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useauctionwinner"
      }
    },
    {
      "name": "useBidBuffer",
      "summary": "Get the bid buffer for an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: bidBuffer, isLoading, error } = useBidBuffer(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usebidbuffer"
      }
    },
    {
      "name": "useCancelEnglishAuction",
      "summary": "Cancel an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelEnglishAuction,\n    isLoading,\n    error,\n  } = useCancelEnglishAuction(contract);\n\n  if (error) {\n    console.error(\"failed to cancel english auction\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelEnglishAuction}\n    >\n      Cancel English Auction\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecancelenglishauction"
      }
    },
    {
      "name": "useCreateAuctionListing",
      "summary": "Create a new english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createAuctionListing,\n    isLoading,\n    error,\n  } = useCreateAuctionListing(contract);\n\n  if (error) {\n    console.error(\"failed to create auction listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createAuctionListing(auctionListingData)}\n    >\n      Create Auction Listing!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecreateauctionlisting"
      }
    },
    {
      "name": "useEnglishAuction",
      "summary": "Get an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const auctionId = 0; // the listing id to check\nconst { data: englishAuction, isLoading, error } = useEnglishAuction(contract, auctionId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useenglishauction"
      }
    },
    {
      "name": "useEnglishAuctions",
      "summary": "Get all english auctions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: englishAuctions, isLoading, error } = useEnglishAuctions(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useenglishauctions"
      }
    },
    {
      "name": "useEnglishAuctionsCount",
      "summary": "Get the total count of english auctions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: englishAuctionsCount, isLoading, error } = useEnglishAuctionsCount(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useenglishauctionscount"
      }
    },
    {
      "name": "useEnglishAuctionWinningBid",
      "summary": "Get the winning bid for an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0;\nconst { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useenglishauctionwinningbid"
      }
    },
    {
      "name": "useValidEnglishAuctions",
      "summary": "Get all valid english auctions\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: validEnglishAuctions, isLoading, error } = useValidEnglishAuctions(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usevalidenglishauctions"
      }
    }
  ],
  "ERC721Burnable": [
    {
      "name": "useBurnNFT",
      "summary": "Burn an NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: burnNFT,\n    isLoading,\n    error,\n  } = useBurnNFT(contract);\n\n  if (error) {\n    console.error(\"failed to burn NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => burnNFT({ tokenId: 0, amount: 1 })}\n    >\n      Burn!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useburnnft"
      }
    }
  ],
  "ERC1155Burnable": [
    {
      "name": "useBurnNFT",
      "summary": "Burn an NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: burnNFT,\n    isLoading,\n    error,\n  } = useBurnNFT(contract);\n\n  if (error) {\n    console.error(\"failed to burn NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => burnNFT({ tokenId: 0, amount: 1 })}\n    >\n      Burn!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useburnnft"
      }
    }
  ],
  "ERC20Burnable": [
    {
      "name": "useBurnToken",
      "summary": "Burn tokens\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: burnTokens,\n    isLoading,\n    error,\n  } = useBurnToken(contract);\n\n  if (error) {\n    console.error(\"failed to burn tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => burnTokens({ amount: 1000 })}\n    >\n      Burn!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useburntoken"
      }
    }
  ],
  "DirectListings": [
    {
      "name": "useCancelDirectListing",
      "summary": "Cancel a direct listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: cancelDirectListing,\n    isLoading,\n    error,\n  } = useCancelDirectListing(contract);\n\n  if (error) {\n    console.error(\"failed to cancel direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={cancelDirectListing}\n    >\n      Cancel Direct Listing\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecanceldirectlisting"
      }
    },
    {
      "name": "useCreateDirectListing",
      "summary": "Create a new direct listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: createDirectListing,\n    isLoading,\n    error,\n  } = useCreateDirectListing(contract);\n\n  if (error) {\n    console.error(\"failed to create direct listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => createDirectListing(directListingData)}\n    >\n      Create Direct Listing!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usecreatedirectlisting"
      }
    },
    {
      "name": "useDirectListing",
      "summary": "Get a direct listing\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0; // the listing id to check\nconst { data: directListing, isLoading, error } = useListing(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usedirectlisting"
      }
    },
    {
      "name": "useDirectListings",
      "summary": "Get all direct listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: directListings, isLoading, error } = useDirectListings(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usedirectlistings"
      }
    },
    {
      "name": "useDirectListingsCount",
      "summary": "Get the total count of direct listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: directListingsCount, isLoading, error } = useDirectListingsCount(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usedirectlistingscount"
      }
    },
    {
      "name": "useValidDirectListings",
      "summary": "Get all valid direct listings\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: validDirectListings, isLoading, error } = useValidDirectListings(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usevaliddirectlistings"
      }
    }
  ],
  "ERC721LazyMintable": [
    {
      "name": "useClaimedNFTs",
      "summary": "Get all claimed NFTs\n\n",
      "remarks": "\n\nEquivalent to using {@link useNFTs}.\n\n",
      "examples": {
        "javascript": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimednfts"
      }
    },
    {
      "name": "useLazyMint",
      "summary": "Lazy mint NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: lazyMint,\n    isLoading,\n    error,\n  } = useLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => lazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Lazy mint NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.uselazymint"
      }
    },
    {
      "name": "useUnclaimedNFTs",
      "summary": "Get all unclaimed NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useunclaimednfts"
      }
    }
  ],
  "ERC1155LazyMintable": [
    {
      "name": "useClaimedNFTs",
      "summary": "Get all claimed NFTs\n\n",
      "remarks": "\n\nEquivalent to using {@link useNFTs}.\n\n",
      "examples": {
        "javascript": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimednfts"
      }
    },
    {
      "name": "useLazyMint",
      "summary": "Lazy mint NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: lazyMint,\n    isLoading,\n    error,\n  } = useLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => lazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Lazy mint NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.uselazymint"
      }
    },
    {
      "name": "useUnclaimedNFTs",
      "summary": "Get all unclaimed NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useunclaimednfts"
      }
    }
  ],
  "ERC721Claimable": [
    {
      "name": "useClaimNFT",
      "summary": "Claim an NFT to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimNFT,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNFT({ to: \"{{wallet_address}}\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimnft"
      }
    }
  ],
  "ERC1155Claimable": [
    {
      "name": "useClaimNFT",
      "summary": "Claim an NFT to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: claimNFT,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNFT({ to: \"{{wallet_address}}\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useclaimnft"
      }
    }
  ],
  "ERC721Revealable": [
    {
      "name": "useDelayedRevealLazyMint",
      "summary": "Lazy mint NFTs with delayed reveal\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: delayedRevealLazyMint,\n    isLoading,\n    error,\n  } = useDelayedRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => delayedRevealLazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Delayed Reveal Lazy mint NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usedelayedreveallazymint"
      }
    },
    {
      "name": "useRevealLazyMint",
      "summary": "Reveal a batch of delayed reveal NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revealLazyMint,\n    isLoading,\n    error,\n  } = useRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to reveal batch\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revealLazyMint({ batchId: \"0\", password: \"my-password\" })}\n    >\n      Reveal batch!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usereveallazymint"
      }
    }
  ],
  "ERC1155Revealable": [
    {
      "name": "useDelayedRevealLazyMint",
      "summary": "Lazy mint NFTs with delayed reveal\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: delayedRevealLazyMint,\n    isLoading,\n    error,\n  } = useDelayedRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to lazy mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => delayedRevealLazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n    >\n      Delayed Reveal Lazy mint NFT!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usedelayedreveallazymint"
      }
    },
    {
      "name": "useRevealLazyMint",
      "summary": "Reveal a batch of delayed reveal NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revealLazyMint,\n    isLoading,\n    error,\n  } = useRevealLazyMint(contract);\n\n  if (error) {\n    console.error(\"failed to reveal batch\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revealLazyMint({ batchId: \"0\", password: \"my-password\" })}\n    >\n      Reveal batch!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usereveallazymint"
      }
    }
  ],
  "Permissions": [
    {
      "name": "useGrantRole",
      "summary": "Grant a role to a specific address\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: grantRole,\n    isLoading,\n    error,\n  } = useGrantRole(contract);\n\n  if (error) {\n    console.error(\"failed to grant role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => grantRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Grant Role\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usegrantrole"
      }
    },
    {
      "name": "useRevokeRole",
      "summary": "Revoke a role from a specific address\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: revokeRole,\n    isLoading,\n    error,\n  } = useRevokeRole(contract);\n\n  if (error) {\n    console.error(\"failed to revoke role\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => revokeRole({ role: \"admin\", address: {{wallet_address}} })}\n    >\n      Revoke Role\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.userevokerole"
      }
    },
    {
      "name": "useRoleMembers",
      "summary": "Get all members of a specific role\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: members, isLoading, error } = useRoleMembers(SmartContract, \"admin\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.userolemembers"
      }
    },
    {
      "name": "useSetAllRoleMembers",
      "summary": "Overwrite the list of members for specific roles\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: overwriteRoles,\n    isLoading,\n    error,\n  } = useSetAllRoleMembers(contract);\n\n  if (error) {\n    console.error(\"failed to overwrite roles\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n    >\n      Overwrite Roles\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usesetallrolemembers"
      }
    }
  ],
  "EnglishAucton": [
    {
      "name": "useMinimumNextBid",
      "summary": "Get the minimum next bid for an english auction\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const listingId = 0;\nconst { data: minimumNextBid, isLoading, error } = useMinimumNextBid(contract, listingId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useminimumnextbid"
      }
    }
  ],
  "ERC721Mintable": [
    {
      "name": "useMintNFT",
      "summary": "Mint an NFT to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"{{wallet_address}}\" })}\n    >\n      Mint!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemintnft"
      }
    }
  ],
  "ERC1155Mintable": [
    {
      "name": "useMintNFT",
      "summary": "Mint an NFT to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"{{wallet_address}}\" })}\n    >\n      Mint!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemintnft"
      }
    },
    {
      "name": "useMintNFTSupply",
      "summary": "Increase the supply of an existing NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintNftSupply,\n    isLoading,\n    error,\n  } = useMintNFTSupply(contract);\n\n  if (error) {\n    console.error(\"failed to mint additional supply\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNftSupply({ tokenId: 0, additionalSupply: 100, to: \"{{wallet_address}}\"})}\n    >\n      Mint Additional Supply!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usemintnftsupply"
      }
    }
  ],
  "ERC20Mintable": [
    {
      "name": "useMintToken",
      "summary": "Mint tokens\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: mintTokens,\n    isLoading,\n    error,\n  } = useMintToken(contract);\n\n  if (error) {\n    console.error(\"failed to mint tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n    >\n      Mint!\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useminttoken"
      }
    }
  ],
  "ERC721": [
    {
      "name": "useNFT",
      "summary": "Get a single NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const tokenId = 0; // the tokenId to look up\nconst { data: nft, isLoading, error } = useNFT(contract, tokenId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenft"
      }
    },
    {
      "name": "useNFTBalance",
      "summary": "Get NFT balance of a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\");\n// for ERC1155 contracts, you can also pass a tokenId\nconst tokenId = 0;\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\", tokenId);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenftbalance"
      }
    },
    {
      "name": "useTransferNFT",
      "summary": "Transfer an NFT\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferNFT,\n    isLoading,\n    error,\n  } = useTransferNFT(contract);\n\n  if (error) {\n    console.error(\"failed to transfer NFT\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferNFT({\n        to: \"{{wallet_address}}\",\n        tokenId: 2\n      })}\n    >\n      Transfer\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetransfernft"
      }
    }
  ],
  "ERC721Supply": [
    {
      "name": "useNFTs",
      "summary": "Get all NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenfts"
      }
    },
    {
      "name": "useOwnedNFTs",
      "summary": "Get all NFTs owned by a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useownednfts"
      }
    },
    {
      "name": "useTotalCirculatingSupply",
      "summary": "Get total minted supply count\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    },
    {
      "name": "useTotalCount",
      "summary": "Get total supply count\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: count, isLoading, error } = useTotalCount(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetotalcount"
      }
    }
  ],
  "ERC721Enumerable": [
    {
      "name": "useNFTs",
      "summary": "Get all NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenfts"
      }
    },
    {
      "name": "useOwnedNFTs",
      "summary": "Get all NFTs owned by a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useownednfts"
      }
    }
  ],
  "ERC1155Enumerable": [
    {
      "name": "useNFTs",
      "summary": "Get all NFTs\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usenfts"
      }
    },
    {
      "name": "useOwnedNFTs",
      "summary": "Get all NFTs owned by a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useownednfts"
      }
    },
    {
      "name": "useTotalCirculatingSupply",
      "summary": "Get total minted supply count\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetotalcirculatingsupply"
      }
    },
    {
      "name": "useTotalCount",
      "summary": "Get total supply count\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { contract } = useContract(\"{{contract_address}}\");\nconst { data: count, isLoading, error } = useTotalCount(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetotalcount"
      }
    }
  ],
  "PlatformFee": [
    {
      "name": "usePlatformFees",
      "summary": "Get the platform fee recipient and basis points\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: platformFees, isLoading, error } = usePlatformFees(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useplatformfees"
      }
    },
    {
      "name": "useUpdatePlatformFees",
      "summary": "Set the platform fee recipient and basis points\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updatePlatformFees,\n    isLoading,\n    error,\n  } = useUpdatePlatformFees(contract);\n\n  if (error) {\n    console.error(\"failed to update platform fees\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePlatformFees({ updatePayload: { fee_recipient: \"{{wallet_address}}\", platform_fee_basis_points: 5_00 } })}\n    >\n      Update Platform fees\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useupdateplatformfees"
      }
    }
  ],
  "PrimarySale": [
    {
      "name": "usePrimarySaleRecipient",
      "summary": "Get the primary sale recipient\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: primarySaleRecipient, isLoading, error } = usePrimarySalesRecipient(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useprimarysalerecipient"
      }
    },
    {
      "name": "useUpdatePrimarySaleRecipient",
      "summary": "Set the primary sale recipient\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updatePrimarySalesRecipient,\n    isLoading,\n    error,\n  } = useUpdatePrimarySaleRecipient(contract);\n\n  if (error) {\n    console.error(\"failed to update recipient\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updatePrimarySalesRecipient({ newRecipient: \"{{wallet_address}}\" })}\n    >\n      Update Recipient\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useupdateprimarysalerecipient"
      }
    }
  ],
  "Royalty": [
    {
      "name": "useRoyaltySettings",
      "summary": "Get the royalty recipient and fee\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: settings, isLoading, error } = useRoyaltySettings(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useroyaltysettings"
      }
    },
    {
      "name": "useUpdateRoyaltySettings",
      "summary": "Set the royalty recipient and fee\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: updateRoyaltySettings,\n    isLoading,\n    error,\n  } = useUpdateRoyaltySettings(contract);\n\n  if (error) {\n    console.error(\"failed to update royalty settings\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => updateRoyaltySettings({ updatePayload: { fee_recipient: \"{{wallet_address}}\", seller_fee_basis_points: 5_00 } })}\n    >\n      Update Royalty Settings\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.useupdateroyaltysettings"
      }
    }
  ],
  "ERC20": [
    {
      "name": "useTokenBalance",
      "summary": "Get token balance for a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: balance, isLoading, error } = useTokenBalance(contract, \"{{wallet_address}}\");"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetokenbalance"
      }
    },
    {
      "name": "useTokenDecimals",
      "summary": "Get token decimals\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: decimals, isLoading, error } = useTokenDecimals(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetokendecimals"
      }
    },
    {
      "name": "useTokenSupply",
      "summary": "Get the total supply for this token\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const { data: totalSupply, isLoading, error } = useTokenSupply(contract);"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetokensupply"
      }
    },
    {
      "name": "useTransferBatchToken",
      "summary": "Airdrop tokens to a list of wallets\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferBatchTokens,\n    isLoading,\n    error,\n  } = useTransferToken(contract);\n\n  if (error) {\n    console.error(\"failed to transfer batch tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferBatchTokens([{ to: \"{{wallet_address}}\", amount: 1000 }, { to: \"{{wallet_address}}\", amount: 2000 }])}\n    >\n      Airdrop\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetransferbatchtoken"
      }
    },
    {
      "name": "useTransferToken",
      "summary": "Transfer tokens to a specific wallet\n\n",
      "remarks": null,
      "examples": {
        "javascript": "const Component = () => {\n  const { contract } = useContract(\"{{contract_address}}\");\n  const {\n    mutate: transferTokens,\n    isLoading,\n    error,\n  } = useTransferToken(contract);\n\n  if (error) {\n    console.error(\"failed to transfer tokens\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => transferTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n    >\n      Transfer\n    </button>\n  );\n};"
      },
      "reference": {
        "javascript": "https://docs.thirdweb.com/react/react.usetransfertoken"
      }
    }
  ]
}