{
  "ERC1155ClaimConditionsV2": [
    {
      "name": "claim",
      "summary": "Claim NFTs\n\n",
      "remarks": "\n\nLet the connected wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var tokenId = \"0\"; // the id of the NFT you want to claim\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC1155.Claim(tokenId, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim NFTs to a specific wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nvar tokenId = \"0\"; // the id of the NFT you want to claim\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC1155.ClaimTo(address, tokenId, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "var tokenId = \"0\";\nawait contract.ERC1155.claimConditions.GetActive(tokenId);"
      }
    }
  ],
  "ERC1155ClaimPhasesV2": [
    {
      "name": "claim",
      "summary": "Claim NFTs\n\n",
      "remarks": "\n\nLet the connected wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var tokenId = \"0\"; // the id of the NFT you want to claim\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC1155.Claim(tokenId, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim NFTs to a specific wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nvar tokenId = \"0\"; // the id of the NFT you want to claim\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC1155.ClaimTo(address, tokenId, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "var tokenId = \"0\";\nawait contract.ERC1155.claimConditions.GetActive(tokenId);"
      }
    }
  ],
  "ERC1155SignatureMintable": [
    {
      "name": "generate",
      "summary": "Generate a signature that can be used to mint an NFT dynamically.\n\n",
      "remarks": "\n\nTakes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n\n",
      "examples": {
        "unity": "var meta =\r\n    new NFTMetadata()\r\n    {\r\n        name = \"Unity NFT\",\r\n        description = \"Minted From Unity (signature)\",\r\n        image = \"ipfs://QmbpciV7R5SSPb6aT9kEBAxoYoXBUsStJkMpxzymV4ZcVc\"\r\n    };\r\nstring connectedAddress = await sdk.wallet.GetAddress();\r\nvar payload = new ERC1155MintPayload(connectedAddress, meta);\r\nvar signature = await contract.ERC1155.signature.Generate(payload);"
      }
    },
    {
      "name": "generateFromTokenId",
      "summary": "Generate a signature that can be used to mint additionaly supply to an existing NFT.\n\n",
      "remarks": "\n\nTakes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n\n",
      "examples": {
        "unity": "string connectedAddress = await sdk.wallet.GetAddress();\r\nstring tokenId = \"0\";\r\nvar payload =\r\n    new ERC1155MintAdditionalPayload(connectedAddress, tokenId);\r\npayload.quantity = 3;\r\nvar signature =\r\n    await contract.ERC1155.signature.GenerateFromTokenId(payload);"
      }
    },
    {
      "name": "mint",
      "summary": "Mint a dynamically generated NFT\n\n",
      "remarks": "\n\nMint a dynamic NFT with a previously generated signature.\n\n",
      "examples": {
        "unity": "// Use the signature you generated in the Mint method:\n var nft = await contract.ERC1155.signature.Mint(signature);"
      }
    }
  ],
  "ERC1155": [
    {
      "name": "balanceOf",
      "summary": "Get NFT Balance\n\n",
      "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
      "examples": {
        "unity": "// Address of the wallet to check NFT balance\nvar walletAddress = \"{{wallet_address}}\";\nvar tokenId = \"0\"; // Id of the NFT to check\nvar balance = await contract.ERC1155.BalanceOf(walletAddress, tokenId);"
      }
    },
    {
      "name": "get",
      "summary": "Get a single NFT\n\n",
      "remarks": null,
      "examples": {
        "unity": "var tokenId = \"0\";\nvar nft = await contract.ERC1155.Get(tokenId);"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer NFTs\n\n",
      "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet you want to send the NFT to\nvar toAddress = \"{{wallet_address}}\";\nvar tokenId = \"0\"; // The token ID of the NFT you want to send\nvar amount = 3; // How many copies of the NFTs to transfer\nawait contract.ERC1155.Transfer(toAddress, tokenId, amount);"
      }
    }
  ],
  "ERC1155Burnable": [
    {
      "name": "burn",
      "summary": "Burn NFTs\n\n",
      "remarks": "\n\nBurn the specified NFTs from the connected wallet\n\n",
      "examples": {
        "unity": "// The token ID to burn NFTs of\nvar tokenId = \"0\";\n// The amount of the NFT you want to burn\nvar amount = 2;\n\nvar result = await contract.ERC1155.Burn(tokenId, amount);"
      }
    }
  ],
  "ERC1155Enumerable": [
    {
      "name": "getAll",
      "summary": "Get all NFTs\n\n",
      "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
      "examples": {
        "unity": "var nfts = await contract.ERC1155.GetAll();"
      }
    },
    {
      "name": "getOwned",
      "summary": "Get owned NFTs\n\n",
      "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet to get the NFTs of\nvar address = \"{{wallet_address}}\";\nvar nfts = await contract.ERC1155.GetOwned(address);"
      }
    }
  ],
  "ERC1155Mintable": [
    {
      "name": "mint",
      "summary": "Mint an NFT\n\n",
      "remarks": "\n\nMint an NFT with a limited supply to the connected wallet.\n\n",
      "examples": {
        "unity": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\r\nvar metadata =\r\n    new NFTMetadata()\r\n    {\r\n        name = \"Cool NFT\",\r\n        description = \"This is a cool NFT\",\r\n        image = \"<your-image-url>\"\r\n    };\r\nvar metadataWithSupply =\r\n    new NFTMetadataWithSupply() { metadata = metadata, supply = 1 };\r\nvar tx = await contract.ERC1155.Mint(metadataWithSupply);"
      }
    },
    {
      "name": "mintAdditionalSupply",
      "summary": "Increase the supply of an existing NFT\n\n",
      "remarks": "\n\nIncrease the supply of an existing NFT and mint it to the connected wallet address\n\n",
      "examples": {
        "unity": "var tokenId = \"0\";\nvar additionalSupply = 1000;\nawait contract.ERC1155.MintAdditionalSupply(tokenId, additionalSupply);"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint an NFT to a specific wallet\n\n",
      "remarks": "\n\nMint an NFT with a limited supply to a specified wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet you want to mint the NFT to\r\nvar toAddress = \"{{wallet_address}}\";\r\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\r\nvar metadata =\r\n    new NFTMetadata()\r\n    {\r\n        name = \"Cool NFT\",\r\n        description = \"This is a cool NFT\",\r\n        image = \"<your-image-url>\"\r\n    };\r\nvar metadataWithSupply =\r\n    new NFTMetadataWithSupply() { metadata = metadata, supply = 1 };\r\nvar tx = await contract.ERC1155.MintTo(toAddress, metadataWithSupply);"
      }
    }
  ],
  "ERC20ClaimConditionsV2": [
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "await contract.ERC20.claimConditions.GetActive();"
      }
    },
    {
      "name": "claim",
      "summary": "Claim tokens\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "unity": "// address of the wallet you want to claim the NFTs\nvar quantity = \"1\"; // how many tokens you want to claim\n\nvar tx = await contract.ERC20.Claim(quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim tokens to a specific Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nvar quantity = 1; // how many tokens you want to claim\n\nvar tx = await contract.ERC20.ClaimTo(address, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    }
  ],
  "ERC20ClaimPhasesV2": [
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "await contract.ERC20.claimConditions.GetActive();"
      }
    },
    {
      "name": "claim",
      "summary": "Claim tokens\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "unity": "// address of the wallet you want to claim the NFTs\nvar quantity = \"1\"; // how many tokens you want to claim\n\nvar tx = await contract.ERC20.Claim(quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim tokens to a specific Wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nvar quantity = 1; // how many tokens you want to claim\n\nvar tx = await contract.ERC20.ClaimTo(address, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    }
  ],
  "ERC20SignatureMintable": [
    {
      "name": "generate",
      "summary": "Generate a signature that can be used to mint tokens\n\n",
      "remarks": "\n\nTakes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n\n",
      "examples": {
        "unity": "string connectedAddress = await sdk.wallet.GetAddress();\r\nstring quantity = \"1\";\r\nvar payload = new ERC20MintPayload(connectedAddress, quantity);\r\nvar signature = await contract.ERC20.signature.Generate(payload);"
      }
    },
    {
      "name": "mint",
      "summary": "Mint tokens from a signature\n\n",
      "remarks": "\n\nMint a certain amount of tokens from a previously generated signature.\n\n",
      "examples": {
        "unity": "// Use the signature you generated above to pass into the Mint method.\n  var nft = await contract.ERC20.signature.Mint(signature);"
      }
    }
  ],
  "ERC20": [
    {
      "name": "allowanceOf",
      "summary": "Get allowance\n\n",
      "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet who owns the funds\nvar owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nvar spender = \"0x...\";\nvar allowance = await contract.ERC20.AllowanceOf(owner, spender);"
      }
    },
    {
      "name": "balance",
      "summary": "Get balance\n\n",
      "remarks": "\n\nGet a wallets token balance.\n\n",
      "examples": {
        "unity": "var balance = await contract.ERC20.Balance();"
      }
    },
    {
      "name": "balanceOf",
      "summary": "Get balance of a specified wallet\n\n",
      "remarks": "\n\nGet a wallets token balance.\n\n",
      "examples": {
        "unity": "// Address of the wallet to check token balance\nvar walletAddress = \"{{wallet_address}}\";\nvar balance = await contract.ERC20.BalanceOf(walletAddress);"
      }
    },
    {
      "name": "get",
      "summary": "Get the token metadata\n\n",
      "remarks": null,
      "examples": {
        "unity": "var token = await contract.ERC20.Get();"
      }
    },
    {
      "name": "setAllowance",
      "summary": "Set allowance",
      "remarks": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
      "examples": {
        "unity": "// Address of the wallet to allow transfers from\nvar spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nvar amount = \"100\";\nawait contract.ERC20.SetAllowance(spenderAddress, amount);"
      }
    },
    {
      "name": "totalSupply",
      "summary": "Get the total supply\n\n",
      "remarks": "\n\nGet how much supply has been minted\n\n",
      "examples": {
        "unity": "var balance = await contract.ERC20.TotalSupply();"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer tokens\n\n",
      "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet you want to send the tokens to\nvar toAddress = \"0x...\";\n// The amount of tokens you want to send\nvar amount = \"0.1\";\nawait contract.ERC20.Transfer(toAddress, amount);"
      }
    },
    {
      "name": "transferFrom",
      "summary": "Transfer tokens from a specified wallet\n\n",
      "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
      "examples": {
        "unity": "// Address of the wallet sending the tokens\nvar fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nvar toAddress = \"0x...\";\n// The number of tokens you want to send\nvar amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.ERC20.TransferFrom(fromAddress, toAddress, amount);"
      }
    }
  ],
  "ERC20Burnable": [
    {
      "name": "burn",
      "summary": "Burn tokens\n\n",
      "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
      "examples": {
        "unity": "// The amount of this token you want to burn\nvar amount = \"1.2\";\n\nawait contract.ERC20.Burn(amount);"
      }
    }
  ],
  "ERC20Mintable": [
    {
      "name": "mint",
      "summary": "Mint tokens\n\n",
      "remarks": "\n\nMint tokens to the connected wallet.\n\n",
      "examples": {
        "unity": "var amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.ERC20.Mint(amount);"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint tokens to a specific wallet\n\n",
      "remarks": "\n\nMint tokens to a specific address.\n\n",
      "examples": {
        "unity": "var toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nvar amount = \"1.5\"; // The amount of this token you want to mint\nawait contract.ERC20.MintTo(toAddress, amount);"
      }
    }
  ],
  "ERC721ClaimConditionsV2": [
    {
      "name": "claim",
      "summary": "Claim NFTs\n\n",
      "remarks": "\n\nLet the connected wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC721.Claim(quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim NFTs to a specific wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nv\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC721.ClaimTo(address, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "await contract.ERC721.claimConditions.GetActive();"
      }
    }
  ],
  "ERC721ClaimPhasesV2": [
    {
      "name": "claim",
      "summary": "Claim NFTs\n\n",
      "remarks": "\n\nLet the connected wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC721.Claim(quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimTo",
      "summary": "Claim NFTs to a specific wallet\n\n",
      "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
      "examples": {
        "unity": "var address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nvar quantity = 1; // how many NFTs you want to claim\n\nvar tx = await contract.ERC721.ClaimTo(address, quantity);\nvar receipt = tx.receipt; // the transaction receipt"
      }
    },
    {
      "name": "claimConditions",
      "summary": "Get the active claim conditions\n\n",
      "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
      "examples": {
        "unity": "var conditions = await contract.ERC721.claimConditions.GetActive();"
      }
    }
  ],
  "ERC721SignatureMintV1": [
    {
      "name": "generate",
      "summary": "Generate a signature that can be used to mint dynamic NFTs\n\n",
      "remarks": "\n\nTakes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n\n",
      "examples": {
        "unity": "var meta = new NFTMetadata()\n{\n    name = \"Unity NFT\",\n    description = \"Minted From Unity (signature)\",\n    image = \"ipfs://QmbpciV7R5SSPb6aT9kEBAxoYoXBUsStJkMpxzymV4ZcVc\"\n};\nstring connectedAddress = await sdk.wallet.GetAddress();\nvar payload = new ERC721MintPayload(connectedAddress, meta);\nvar signature = await contract.ERC721.signature.Generate(payload); // typically generated on the backend"
      }
    },
    {
      "name": "mint",
      "summary": "Mint a dynamically generated NFT\n\n",
      "remarks": "\n\nMint a dynamic NFT with a previously generated signature.\n\n",
      "examples": {
        "unity": "// Provide the signature you generated above to the Mint function:\nvar result = await contract.ERC721.signature.Mint(signature);"
      }
    }
  ],
  "ERC721": [
    {
      "name": "balanceOf",
      "summary": "Get NFT balance\n\n",
      "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
      "examples": {
        "unity": "var walletAddress = \"{{wallet_address}}\";\nvar balance = await contract.ERC721.BalanceOf(walletAddress);\nDebug.Log(balance);"
      }
    },
    {
      "name": "get",
      "summary": "Get a single NFT\n\n",
      "remarks": null,
      "examples": {
        "unity": "var tokenId = \"0\";\nvar nft = await contract.ERC721.Get(tokenId);"
      }
    },
    {
      "name": "transfer",
      "summary": "Transfer NFTs\n\n",
      "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
      "examples": {
        "unity": "var walletAddress = \"{{wallet_address}}\";\nvar tokenId = \"0\";\nawait contract.ERC721.Transfer(walletAddress, tokenId);"
      }
    }
  ],
  "ERC721Burnable": [
    {
      "name": "burn",
      "summary": "Burn a single NFT\n\n",
      "remarks": null,
      "examples": {
        "unity": "var tokenId = \"0\";\nvar result = await contract.ERC721.Burn(tokenId);"
      }
    }
  ],
  "ERC721Supply": [
    {
      "name": "getAll",
      "summary": "Get all NFTs\n\n",
      "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
      "examples": {
        "unity": "var nfts = await contract.ERC721.GetAll();\nDebug.Log(nfts);"
      }
    },
    {
      "name": "getOwned",
      "summary": "Get owned NFTs\n\n",
      "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet to get the NFTs of\nvar address = \"{{wallet_address}}\";\nvar nfts = await contract.ERC721.GetOwned(address);\nDebug.Log(nfts);"
      }
    }
  ],
  "ERC721Mintable": [
    {
      "name": "mint",
      "summary": "Mint NFT\n\n",
      "remarks": "\n\nMint a unique NFT to the connected wallet.\n\n",
      "examples": {
        "unity": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nvar metadata = new NFTMetadata() {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.ReadFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nvar tx = await contract.ERC721.Mint(metadata);\nvar receipt = tx.receipt; // the transaction receipt\nvar tokenId = tx.id; // the id of the NFT minted\nvar nft = await tx.data(); // (optional) fetch details of minted NFT"
      }
    },
    {
      "name": "mintTo",
      "summary": "Mint NFT to a specific wallet\n\n",
      "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
      "examples": {
        "unity": "// Address of the wallet you want to mint the NFT to\nvar walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nvar metadata = new NFTMetadata() {\n  name =  \"Cool NFT\",\n  description = \"This is a cool NFT\",\n  image = \"<image-url-here>\" \n};\n\nvar tx = await contract.ERC721.MintTo(walletAddress, metadata);"
      }
    }
  ]
}
