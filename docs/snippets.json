{
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getNFTCollection(\"{{contract_address}}\");",
      "react": "import { useNFTCollection } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftCollection = useNFTCollection(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nftCollection contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_nft_collection(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTCollection(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a single NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burn(tokenId);",
          "python": "",
          "go": "tokenId := 0\ntx, err := contract.Burn(tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection.burn",
          "python": "",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-burn",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "nfts = contract.get_all()\nprint(nfts)",
          "go": "nfts, err := contract.GetAll()\nownerOne := nfts[0].Owner\nnameOne := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection.getAll",
          "python": "https://docs.thirdweb.com/python/erc721#get_all",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-getall",
          "react": ""
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "nfts = contract.get_owned(\"{{wallet_address}}\")\nprint(nfts)",
          "go": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection.getOwned",
          "python": "https://docs.thirdweb.com/python/nft-collection#get_owned",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-getowned",
          "react": ""
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many unique NFTs\n\n",
        "remarks": "\n\nMint many unique NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput\n\n# You can customize this metadata however you like\nmetadatas = [\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    NFTMetadataInput.from_json({\n        \"name\": \"Cooler NFT\",\n        \"description\": \"This is a cooler NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n]\n\n# You can pass in any address here to mint the NFT to\ntxs = contract.mint_batch_to(\"{{wallet_address}}\", metadatas)\nreceipt = txs[0].receipt\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
          "go": "metadatas := []*thirdweb.NFTMetadataInput{\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t}\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT 2\",\n\t\tDescription: \"This is also a cool NFT\",\n\t}\n}\n\ntx, err := contract.MintBatchTo(\"{{wallet_address}}\", metadatas)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection.mintBatchTo",
          "python": "https://docs.thirdweb.com/python/nft-collection#mint_batch_to",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-mintbatchto",
          "react": ""
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint a unique NFT\n\n",
        "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadata = NFTMetadataInput.from_json({\n    \"name\": \"Cool NFT\",\n    \"description\": \"This is a cool NFT\",\n    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n})\n\n# You can pass in any address here to mint the NFT to\ntx = contract.mint_to(\"{{wallet_address}}\", metadata)\nreceipt = tx.receipt\ntoken_id = tx.id\nnft = tx.data()",
          "go": "image, err := os.Open(\"path/to/image.jpg\")\ndefer image.Close()\n\nmetadata := &thirdweb.NFTMetadataInput{\n\tName: \"Cool NFT\",\n\tDescription: \"This is a cool NFT\",\n\tImage: image,\n}\n\ntx, err := contract.MintTo(\"{{wallet_address}}\", metadata)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection.mintTo",
          "python": "https://docs.thirdweb.com/python/nft-collection#mint_to",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-mintto",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.nft.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "balance = contract.balance_of(\"{{wallet_address}}\")\nprint(balance)",
          "go": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf(address)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc721#balance_of",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.nft.get(tokenId);",
          "python": "nft = contract.get(0)\nprint(nft)",
          "go": "nft, err := contract.Get(0)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.get",
          "python": "https://docs.thirdweb.com/python/erc721#get",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-get",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.nft.transfer(walletAddress, tokenId);",
          "python": "to = \"{{wallet_address}}\"\ntoken_id = 0\n\nreceipt = contract.transfer(to, token_id)",
          "go": "to := \"0x...\"\ntokenId := 0\n\ntx, err := contract.Transfer(to, tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.transfer",
          "python": "https://docs.thirdweb.com/python/erc721#transfer",
          "go": "https://docs.thirdweb.com/go/nft_collection#func-nftcollection-transfer",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc721signatureminting",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.NFTCollection",
      "python": "https://docs.thirdweb.com/python/nft-collection",
      "go": "https://docs.thirdweb.com/go/nft_collection"
    }
  },
  "Edition": {
    "name": "Edition",
    "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getEdition(\"{{contract_address}}\");",
      "react": "import { useEdition } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const edition = useEdition(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_edition(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEditionDrop(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a specified amount of a NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burn(tokenId, amount);",
          "python": "",
          "go": "tokenId := 0\namount := 1\ntx, err := contract.Burn(tokenId, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Edition.burn",
          "python": "",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-burn",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();",
          "python": "metadatas = contract.get_all()\nprint(metadatas)",
          "go": "nfts, err := contract.GetAll()\nsupplyOne := nfts[0].Supply\nnameOne := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Edition.getAll",
          "python": "https://docs.thirdweb.com/python/erc1155#get_all",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getall",
          "react": ""
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);",
          "python": "address = \"{{wallet_address}}\"\nowned = contract.get_owned(address)\nprint(owned)",
          "go": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Edition.getOwned",
          "python": "https://docs.thirdweb.com/python/erc1155#get_owned",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getowned",
          "react": ""
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs with limited supplies\n\n",
        "remarks": "\n\nMint many different NFTs with limited supplies to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadatas_with_supply = [\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cool NFT\",\n            \"description\": \"This is a cool NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    ),\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cooler NFT\",\n            \"description\": \"This is a cooler NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    )\n]\n\n# You can pass in any address here to mint the NFT to\ntxs = contract.mint_batch_to(\"{{wallet_address}}\", metadatas_with_supply)\nreceipt = txs[0].receipt\ntoken_id = txs[0].id\nnft = txs[0].data()",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Edition.mintBatchTo",
          "python": "https://docs.thirdweb.com/python/edition#mint_batch_to",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint an NFT with a limited supply\n\n",
        "remarks": "\n\nMint an NFT with a limited supply to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadata_with_supply = EditionMetadataInput(\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    100\n)\n\n# You can pass in any address here to mint the NFT to\ntx = contract.mint_to(\"{{wallet_address}}\", metadata_with_supply)\nreceipt = tx.receipt\ntoken_id = tx.id\nnft = tx.data()",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Edition.mintTo",
          "python": "https://docs.thirdweb.com/python/edition#mint_to",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.airdrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "address = \"{{wallet_address}}\"\ntoken_id = 0\n\nbalance = contract.balance_of(address, token_id)",
          "go": "address := \"{{wallet_address}}\"\ntokenId := 0\nbalance, err := contract.BalanceOf(address, tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc1155#balance_of",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");",
          "python": "nft = contract.get(0)\nprint(nft)",
          "go": "nft, err := contract.Get(0)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.get",
          "python": "https://docs.thirdweb.com/python/erc1155#get",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-get",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "to = \"{{wallet_address}}\"\ntoken_id = 0\namount = 1\n\nreceipt = contract.transfer(to, token_id, amount)",
          "go": "to := \"0x...\"\ntokenId := 0\namount := 1\n\ntx, err := contract.Transfer(to, tokenId, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.transfer",
          "python": "https://docs.thirdweb.com/python/erc1155#transfer",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-transfer",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc1155signatureminting",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Edition",
      "python": "https://docs.thirdweb.com/python/edition",
      "go": "https://docs.thirdweb.com/go/edition_drop"
    }
  },
  "TokenDrop": {
    "name": "TokenDrop",
    "summary": "Create a Drop contract for a standard crypto token or cryptocurrency.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getTokenDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
        "examples": {
          "javascript": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burn(amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.TokenDrop.burn",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "burnFrom",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the specified wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.TokenDrop.burnFrom",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim a certain amount of tokens to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.TokenDrop.claimTo",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "allowance",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.token.allowance(spenderAddress);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowance",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.token.allowanceOf(owner, spender);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowanceOf",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balance",
        "summary": "Get Token Balance for the currently connected wallet\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "const balance = await contract.token.balance();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.balance",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.token.balanceOf(walletAddress);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.balanceOf",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const token = await contract.token.get();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.get",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "setAllowance",
        "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.token.setAllowance(spenderAddress, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.setAllowance",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "totalSupply",
        "summary": "The total supply for this Token\n\n",
        "remarks": "\n\nGet how much supply has been minted\n\n",
        "examples": {
          "javascript": "const balance = await contract.token.totalSupply();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.totalSupply",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.token.transfer(toAddress, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transfer",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "transferBatch",
        "summary": "Transfer Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens from the connected wallet to many wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.token.transferBatch(data);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferBatch",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.token.transferFrom(fromAddress, toAddress, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferFrom",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim Tokens, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 3117.42, // limit how many tokens are released in this presale\n    price: 0.001, // presale price per token\n    snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.008, // public sale price per token\n  }\n]);\nawait contract.claimConditions.set(claimConditions);",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.TokenDrop"
    }
  },
  "Token": {
    "name": "Token",
    "summary": "Create a standard crypto token or cryptocurrency.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getToken(\"{{contract_address}}\");",
      "react": "import { useToken } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const token = useToken(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the token contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_token(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetToken(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
        "examples": {
          "javascript": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burn(amount);",
          "python": "amount = 0.1\ncontract.burn(amount)",
          "go": "amount := 1\ntx, err := contract.Burn(amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Token.burn",
          "python": "https://docs.thirdweb.com/python/erc20#burn",
          "go": "https://docs.thirdweb.com/go/token#func-token-burn",
          "react": ""
        }
      },
      {
        "name": "burnFrom",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the specified wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);",
          "python": "holder = \"{{wallet_address}}\"\namount = 0.1\ncontract.burn_from(holder, amount)",
          "go": "holder := \"0x...\"\namount := 1\n\ntx, err := contract.BurnFrom(holder, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Token.burnFrom",
          "python": "https://docs.thirdweb.com/python/erc20#burn_from",
          "go": "https://docs.thirdweb.com/go/token#func-token-burnfrom",
          "react": ""
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens to many wallets in one transaction.\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);",
          "python": "from thirdweb.types.currency import TokenAmount\n\nargs = [\n    TokenAmount(\"{{wallet_address}}\", 1),\n    TokenAmount(\"{{wallet_address}}\", 2),\n]\n\ncontract.mint_batch_to(args)",
          "go": "args = []*thirdweb.TokenAmount{\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"{{wallet_address}}\",\n\t\tAmount:    1\n\t}\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"{{wallet_address}}\",\n\t\tAmount:    2\n\t}\n}\n\ntx, err := contract.MintBatchTo(args)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Token.mintBatchTo",
          "python": "https://docs.thirdweb.com/python/token#mint_batch_to",
          "go": "https://docs.thirdweb.com/go/token#func-token-mintbatchto",
          "react": ""
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint Tokens\n\n",
        "remarks": "\n\nMint tokens to a specified address.\n\n",
        "examples": {
          "javascript": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\n\nawait contract.mintTo(toAddress, amount);",
          "python": "contract.mint_to(\"{{wallet_address}}\", 1)",
          "go": "tx, err := contract.MintTo(\"{{wallet_address}}\", 1)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Token.mintTo",
          "python": "https://docs.thirdweb.com/python/token#mint_to",
          "go": "https://docs.thirdweb.com/go/token#func-token-mintto",
          "react": ""
        }
      },
      {
        "name": "allowance",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.token.allowance(spenderAddress);",
          "python": "spender = \"{{wallet_address}}\"\nallowance = contract.allowance(spender)",
          "go": "spender := \"0x...\"\n\nallowance, err := contract.Allowance(spender)\nallowanceValue := allowance.DisplayValue\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowance",
          "python": "https://docs.thirdweb.com/python/erc20#allowance",
          "go": "https://docs.thirdweb.com/go/token#func-token-allowance",
          "react": ""
        }
      },
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.token.allowanceOf(owner, spender);",
          "python": "# Address of the wallet who owns the funds\naddress = \"{{wallet_address}}\"\n\n# Address of the wallet to check the token allowance\nspender = \"0x...\"\n\nallowance = contract.allowance_of(address, spender)\nprint(allowance)",
          "go": "address := \"{{wallet_address}}\"\nspender := \"0x...\"\n\nallowance, err := contract.AllowanceOf(address, spender)\nallowanceValue := allowance.DisplayValue\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowanceOf",
          "python": "https://docs.thirdweb.com/python/erc20#allowance_of",
          "go": "https://docs.thirdweb.com/go/token#func-token-allowanceof",
          "react": ""
        }
      },
      {
        "name": "balance",
        "summary": "Get Token Balance for the currently connected wallet\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "const balance = await contract.token.balance();",
          "python": "balance = contract.balance()\nprint(balance)",
          "go": "balance, err := contract.Balance()\n",
          "react": "const { data: balance, isLoading, error } = useTokenBalance(<YourTokenContractInstance>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.balance",
          "python": "https://docs.thirdweb.com/python/erc20#balance",
          "go": "https://docs.thirdweb.com/go/token#func-token-balance",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.token.balanceOf(walletAddress);",
          "python": "address = \"{{wallet_address}}\"\nbalance = contract.balance_of(address)\nprint(balance)",
          "go": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf()\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc20#balance_of",
          "go": "https://docs.thirdweb.com/go/token#func-token-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const token = await contract.token.get();",
          "python": "token = contract.get()\nprint(token)",
          "go": "currency, err := contract.Get()\nsymbol := currency.Symbol\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.get",
          "python": "https://docs.thirdweb.com/python/erc20#get",
          "go": "https://docs.thirdweb.com/go/token#func-token-get",
          "react": ""
        }
      },
      {
        "name": "setAllowance",
        "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.token.setAllowance(spenderAddress, amount);",
          "python": "spender = \"0x...\"\namount = 100\ncontract.set_allowance(spender, amount)",
          "go": "spender := \"0x...\"\namount := 1\n\ntx, err := contract.SetAllowance(spender, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.setAllowance",
          "python": "https://docs.thirdweb.com/python/erc20#set_allowance",
          "go": "https://docs.thirdweb.com/go/token#func-token-setallowance",
          "react": ""
        }
      },
      {
        "name": "totalSupply",
        "summary": "The total supply for this Token\n\n",
        "remarks": "\n\nGet how much supply has been minted\n\n",
        "examples": {
          "javascript": "const balance = await contract.token.totalSupply();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.totalSupply",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.token.transfer(toAddress, amount);",
          "python": "# Address to send tokens to\nto = \"0x...\n\n# Amount of tokens to transfer\namount = 0.1\n\ncontract.transfer(to, amount)",
          "go": "to := \"0x...\"\namount := 1\n\ntx, err := contract.Transfer(to, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transfer",
          "python": "https://docs.thirdweb.com/python/erc20#transfer",
          "go": "https://docs.thirdweb.com/go/token#func-token-transfer",
          "react": ""
        }
      },
      {
        "name": "transferBatch",
        "summary": "Transfer Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens from the connected wallet to many wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.token.transferBatch(data);",
          "python": "from thirdweb.types.currency import TokenAmount\n\ndata = [\n    TokenAmount(\"{{wallet_address}}\", 0.1),\n    TokenAmount(\"0x...\", 0.2),\n]\n\ncontract.transfer_batch(data)",
          "go": "args = []*thirdweb.TokenAmount{\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"0x...\",\n\t\tAmount:    1\n\t}\n\t&thirdweb.TokenAmount{\n\t\tToAddress: \"0x...\",\n\t\tAmount:    2\n\t}\n}\n\ntx, err := contract.TransferBatch(args)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferBatch",
          "python": "https://docs.thirdweb.com/python/erc20#transfer_batch",
          "go": "https://docs.thirdweb.com/go/token#func-token-transferbatch",
          "react": ""
        }
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.token.transferFrom(fromAddress, toAddress, amount);",
          "python": "# Address to send tokens from\nfr = \"{{wallet_address}}\"\n\n# Address to send tokens to\nto = \"0x...\"\n\n# Amount of tokens to transfer\namount = 0.1\n\ncontract.transfer_from(fr, to, amount)",
          "go": "from := \"{{wallet_address}}\"\nto := \"0x...\"\namount := 1\n\ntx, err := contract.TransferFrom(from, to, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferFrom",
          "python": "https://docs.thirdweb.com/python/erc20#transfer_from",
          "go": "https://docs.thirdweb.com/go/token#func-token-transferfrom",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the tokens\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc20signatureminting",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Token",
      "python": "https://docs.thirdweb.com/python/token",
      "go": "https://docs.thirdweb.com/go/token"
    }
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getNFTDrop(\"{{contract_address}}\");",
      "react": "import { useNFTDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftDrop = useNFTDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nft drop contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_nft_drop(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTDrop(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a single NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burn(tokenId);",
          "python": "",
          "go": "tokenId := 0\ntx, err := contract.Burn(tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.burn",
          "python": "",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-burn",
          "react": ""
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim unique NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata",
          "python": "address = {{wallet_address}}\nquantity = 1\n\ntx = contract.claim_to(address, quantity)\nreceipt = tx.receipt\nclaimed_token_id = tx.id\nclaimed_nft = tx.data()",
          "go": "address := \"{{wallet_address}}\"\nquantity = 1\n\ntx, err := contract.ClaimTo(address, quantity)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.claimTo",
          "python": "https://docs.thirdweb.com/python/nft-drop#claim_to",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-claimto",
          "react": ""
        }
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of unique NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many unique NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput\n\n# You can customize this metadata however you like\nmetadatas = [\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    NFTMetadataInput.from_json({\n        \"name\": \"Cooler NFT\",\n        \"description\": \"This is a cooler NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n]\n\ntxs = contract.create_batch(metadatas)\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
          "go": "image0, err := os.Open(\"path/to/image/0.jpg\")\ndefer image0.Close()\n\nimage1, err := os.Open(\"path/to/image/1.jpg\")\ndefer image1.Close()\n\nmetadatas := []*thirdweb.NFTMetadataInput{\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT\",\n\t\tDescription: \"This is a cool NFT\",\n\t\tImage: image1\n\t}\n\t&thirdweb.NFTMetadataInput{\n\t\tName: \"Cool NFT 2\",\n\t\tDescription: \"This is also a cool NFT\",\n\t\tImage: image2\n\t}\n}\n\ntx, err := contract.CreateBatch(metadatas)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.createBatch",
          "python": "https://docs.thirdweb.com/python/nft-drop#create_batch",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-createbatch",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "nfts = contract.get_all()\nprint(nfts)",
          "go": "nfts, err := contract.GetAll()\nownerOne := nfts[0].Owner\nnameOne := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.getAll",
          "python": "https://docs.thirdweb.com/python/erc721#get_all",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getall",
          "react": ""
        }
      },
      {
        "name": "getAllClaimed",
        "summary": "Get All Claimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs (and their owners) that have been claimed in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;",
          "python": "claimed_nfts = contract.get_all_claimed()\nfirst_owner = claimed_nfts[0].owner",
          "go": "claimedNfts, err := contract.GetAllClaimed()\nfirstOwner := claimedNfts[0].Owner\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.getAllClaimed",
          "python": "https://docs.thirdweb.com/python/nft-drop#get_all_claimed",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getallclaimed",
          "react": ""
        }
      },
      {
        "name": "getAllUnclaimed",
        "summary": "Get All Unclaimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs that have been not been claimed yet in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;",
          "python": "unclaimed_nfts = contract.get_all_unclaimed()\nfirst_nft_name = unclaimed_nfts[0].name",
          "go": "unclaimedNfts, err := contract.GetAllUnclaimed()\nfirstNftName := unclaimedNfts[0].Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.getAllUnclaimed",
          "python": "https://docs.thirdweb.com/python/nft-drop#get_all_unclaimed",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getallunclaimed",
          "react": ""
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "nfts = contract.get_owned(\"{{wallet_address}}\")\nprint(nfts)",
          "go": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.getOwned",
          "python": "https://docs.thirdweb.com/python/nft-drop#get_owned",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-getowned",
          "react": ""
        }
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the claimed supply\n\n",
        "remarks": "\n\nGet the number of claimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);",
          "python": "total_claimed = contract.total_claimed_supply()",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.totalClaimedSupply",
          "python": "https://docs.thirdweb.com/python/nft-drop#total_claimed_supply",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the unclaimed supply\n\n",
        "remarks": "\n\nGet the number of unclaimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);",
          "python": "total_unclaimed = contract.total_unclaimed_supply()",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop.totalUnclaimedSupply",
          "python": "https://docs.thirdweb.com/python/nft-drop#total_unclaimed_supply",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.nft.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "balance = contract.balance_of(\"{{wallet_address}}\")\nprint(balance)",
          "go": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf(address)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc721#balance_of",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.nft.get(tokenId);",
          "python": "nft = contract.get(0)\nprint(nft)",
          "go": "nft, err := contract.Get(0)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.get",
          "python": "https://docs.thirdweb.com/python/erc721#get",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-get",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.nft.transfer(walletAddress, tokenId);",
          "python": "to = \"{{wallet_address}}\"\ntoken_id = 0\n\nreceipt = contract.transfer(to, token_id)",
          "go": "to := \"0x...\"\ntokenId := 0\n\ntx, err := contract.Transfer(to, tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.transfer",
          "python": "https://docs.thirdweb.com/python/erc721#transfer",
          "go": "https://docs.thirdweb.com/go/nft_drop#func-nftdrop-transfer",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.claimConditions.set(claimConditions);",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "revealer",
        "summary": "Delayed reveal\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.NFTDrop",
      "python": "https://docs.thirdweb.com/python/nft-drop",
      "go": "https://docs.thirdweb.com/go/nft_drop"
    }
  },
  "EditionDrop": {
    "name": "EditionDrop",
    "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getEditionDrop(\"{{contract_address}}\");",
      "react": "import { useEditionDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const editionDrop = useEditionDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition drop contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_edition_drop(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEditionDrop(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a specified amount of a NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burn(tokenId, amount);",
          "python": "",
          "go": "tokenId := 0\namount := 1\ntx, err := contract.Burn(tokenId, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop.burn",
          "python": "",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-burn",
          "react": ""
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.claimTo(address, tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt",
          "python": "address = {{wallet_address}}\ntoken_id = 0\nquantity = 1\n\ntx = contract.claim_to(address, token_id, quantity)\nreceipt = tx.receipt\nclaimed_token_id = tx.id\nclaimed_nft = tx.data()",
          "go": "address = \"{{wallet_address}}\"\ntokenId = 0\nquantity = 1\n\ntx, err := contract.ClaimTo(address, tokenId, quantity)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop.claimTo",
          "python": "https://docs.thirdweb.com/python/edition-drop#claim_to",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-claimto",
          "react": ""
        }
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT",
          "python": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadatas_with_supply = [\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cool NFT\",\n            \"description\": \"This is a cool NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    ),\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cooler NFT\",\n            \"description\": \"This is a cooler NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    )\n]\n\ntxs = contract.create_batch(metadata_with_supply)\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
          "go": "image0, err := os.Open(\"path/to/image/0.jpg\")\ndefer image0.Close()\n\nimage1, err := os.Open(\"path/to/image/1.jpg\")\ndefer image1.Close()\n\nmetadatasWithSupply := []*thirdweb.EditionMetadataInput{\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t\tImage: image0,\n\t\t},\n\t\tSupply: 100,\n\t},\n\t&thirdweb.EditionMetadataInput{\n\t\tMetadata: &thirdweb.NFTMetadataInput{\n\t\t\tName: \"Cool NFT\",\n\t\t\tDescription: \"This is a cool NFT\",\n\t\t\tImage: image1,\n\t\t},\n\t\tSupply: 100,\n\t},\n}\n\ntx, err := contract.MintBatchTo(\"{{wallet_address}}\", metadatasWithSupply)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop.createBatch",
          "python": "https://docs.thirdweb.com/python/edition-drop#create_batch",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-createbatch",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();",
          "python": "metadatas = contract.get_all()\nprint(metadatas)",
          "go": "nfts, err := contract.GetAll()\nsupplyOne := nfts[0].Supply\nnameOne := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop.getAll",
          "python": "https://docs.thirdweb.com/python/erc1155#get_all",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getall",
          "react": ""
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);",
          "python": "address = \"{{wallet_address}}\"\nowned = contract.get_owned(address)\nprint(owned)",
          "go": "owner := \"{{wallet_address}}\"\nnfts, err := contract.GetOwned(owner)\nname := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop.getOwned",
          "python": "https://docs.thirdweb.com/python/erc1155#get_owned",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-getowned",
          "react": ""
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.airdrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "address = \"{{wallet_address}}\"\ntoken_id = 0\n\nbalance = contract.balance_of(address, token_id)",
          "go": "address := \"{{wallet_address}}\"\ntokenId := 0\nbalance, err := contract.BalanceOf(address, tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc1155#balance_of",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");",
          "python": "nft = contract.get(0)\nprint(nft)",
          "go": "nft, err := contract.Get(0)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.get",
          "python": "https://docs.thirdweb.com/python/erc1155#get",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-get",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "to = \"{{wallet_address}}\"\ntoken_id = 0\namount = 1\n\nreceipt = contract.transfer(to, token_id, amount)",
          "go": "to := \"0x...\"\ntokenId := 0\namount := 1\n\ntx, err := contract.Transfer(to, tokenId, amount)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.transfer",
          "python": "https://docs.thirdweb.com/python/erc1155#transfer",
          "go": "https://docs.thirdweb.com/go/edition_drop#func-editiondrop-transfer",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions for each NFT\n\n",
        "remarks": "\n\nDefine who can claim each NFT in the edition, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nconst tokenId = 0; // the id of the NFT to set claim conditions on\nawait contract.claimConditions.set(tokenId, claimConditions);",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.droperc1155claimconditions",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.EditionDrop",
      "python": "https://docs.thirdweb.com/python/edition-drop",
      "go": "https://docs.thirdweb.com/go/edition_drop"
    }
  },
  "Marketplace": {
    "name": "Marketplace",
    "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getMarketplace(\"{{contract_address}}\");",
      "react": "import { useMarketplace } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const marketplace = useMarketplace(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the marketplace contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_marketplace(\"{{contract_address}}\")"
    },
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Purchase NFTs\n\n",
        "remarks": "\n\nBuy a Direct or Auction listing on your marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutListing(listingId, quantityDesired);",
          "python": "listing_id = 0\nquantity_desired = 1\n\ncontract.buyout_listing(listing_id, quantity_desired)",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.buyoutListing",
          "python": "https://docs.thirdweb.com/python/marketplace#buyout_listing",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getActiveListings",
        "summary": "Get all active listings\n\n",
        "remarks": "\n\nFetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on.\n\n",
        "examples": {
          "javascript": "const listings = await contract.getActiveListings();\nconst priceOfFirstActiveListing = listings[0].price;",
          "python": "listings = contract.get_active_listings()\nprice_of_first = listings[0].price",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.getActiveListings",
          "python": "https://docs.thirdweb.com/python/marketplace#get_active_listings",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getAllListings",
        "summary": "Get all the listings\n\n",
        "remarks": "\n\nFetch all the listings from this marketplace contract, including sold ones.\n\n",
        "examples": {
          "javascript": "const listings = await contract.getAllListings();\nconst priceOfFirstListing = listings[0].price;",
          "python": "listings = contract.get_all_listings()\nprice_of_first = listings[0].price",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.getAllListings",
          "python": "https://docs.thirdweb.com/python/marketplace#get_all_listings",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getListing",
        "summary": "Convenience function to get either a direct or auction listing\n\n",
        "remarks": "\n\nGet a listing by its listing id\n\n",
        "examples": {
          "javascript": "const listingId = 0;\nconst listing = await contract.getListing(listingId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.getListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "setBidBufferBps",
        "summary": "Set the Auction bid buffer\n\n",
        "remarks": "\n\nA percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n\n",
        "examples": {
          "javascript": "// the bid buffer in basis points\nconst bufferBps = 5_00; // 5%\nawait contract.setBidBufferBps(bufferBps);",
          "python": "buffer_bps = 500\ncontract.set_bid_buffer_bps(buffer_bps)",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.setBidBufferBps",
          "python": "https://docs.thirdweb.com/python/marketplace#set_bid_buffer_bps",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "setTimeBufferInSeconds",
        "summary": "Set the Auction Time buffer:\n\n",
        "remarks": "\n\nMeasured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n\n",
        "examples": {
          "javascript": "// the time buffer in seconds\nconst bufferInSeconds = 60;\nawait contract.setTimeBufferInSeconds(bufferInSeconds);",
          "python": "buffer_in_seconds = 60\ncontract.set_time_buffer_in_seconds(buffer_in_seconds)",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Marketplace.setTimeBufferInSeconds",
          "python": "https://docs.thirdweb.com/python/marketplace#set_time_buffer_in_seconds",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "auction",
        "summary": "Auctions\n\n",
        "remarks": "\n\nCreate and manage auctions in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 2.6;\nawait contract.auction.makeBid(listingId, pricePerToken);",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction",
          "python": "",
          "go": ""
        }
      },
      {
        "name": "direct",
        "summary": "Direct listings\n\n",
        "remarks": "\n\nCreate and manage direct listings in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the NFT contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\nawait contract.direct.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Marketplace",
      "python": "https://docs.thirdweb.com/python/marketplace"
    }
  },
  "MarketplaceDirect": {
    "name": "MarketplaceDirect",
    "summary": "Handles direct listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "acceptOffer",
        "summary": "Accept an offer on a direct listing\n\n",
        "remarks": "\n\nAccept an offer on a direct listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect.acceptOffer",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "buyoutListing",
        "summary": "Buy a Listing\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.direct.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect.buyoutListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Direct Listing\n\n",
        "remarks": "\n\nCancel a direct listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect.cancelListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "createListing",
        "summary": "Create Direct Listing\n\n",
        "remarks": "\n\nCreate a new listing on the marketplace where people can buy an asset directly.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect.createListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "makeOffer",
        "summary": "Make an offer for a Direct Listing\n\n",
        "remarks": "\n\nMake an offer on a direct listing\n\n",
        "examples": {
          "javascript": "import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect.makeOffer",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect"
    }
  },
  "MarketplaceAuction": {
    "name": "MarketplaceAuction",
    "summary": "Handles auction listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Buyout Auction\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.buyoutListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Auction Listing\n\n",
        "remarks": "\n\nCancel an auction listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.cancelListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "closeListing",
        "summary": "Close the Auction\n\n",
        "remarks": "\n\nCloses the Auction and executes the sale.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.closeListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "createListing",
        "summary": "Create Auction\n\n",
        "remarks": "\n\nCreate a new auction where people can bid on an asset.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.createListing",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getWinner",
        "summary": "Get Auction Winner\n\n",
        "remarks": "\n\nGet the winner of the auction after an auction ends.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.getWinner",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getWinningBid",
        "summary": "Get Highest Bid\n\n",
        "remarks": "\n\nGet the current highest bid of an active auction.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.getWinningBid",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "makeBid",
        "summary": "Bid On Auction\n\n",
        "remarks": "\n\nMake a bid on an auction listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 1;\n\nawait contract.auction.makeBid(listingId, pricePerToken);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction.makeBid",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction"
    }
  },
  "Split": {
    "name": "Split",
    "summary": "Create custom royalty splits to distribute funds.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getSplit(\"{{contract_address}}\");",
      "react": "import { useSplit } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const split = useSplit(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the split contract in the rest of the component\n}"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await contract.balanceOf(address);\nconsole.log(funds);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.balanceOf",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOfToken",
        "summary": "Get non-native Token Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await contract.balanceOfToken(address, tokenAddress);\nconsole.log(funds);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.balanceOfToken",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "distribute",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "await contract.distribute();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.distribute",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "distributeToken",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait contract.distributeToken(tokenAddress);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.distributeToken",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getAllRecipients",
        "summary": "Get Recipients of this splits contract\n\n",
        "remarks": "\n\nGet the data about the shares of every split recipient on the contract\n\n",
        "examples": {
          "javascript": "const recipients = await contract.getAllRecipients();\nconsole.log(recipients);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.getAllRecipients",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "withdraw",
        "summary": "Withdraw Funds\n\n",
        "remarks": "\n\nTriggers a transfer to account of the amount of native currency they are owed.\n\n",
        "examples": {
          "javascript": "// the wallet address that wants to withdraw their funds\nconst walletAddress = \"{{wallet_address}}\"\nawait contract.withdraw(walletAddress);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Split.withdraw",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Split"
    }
  },
  "Pack": {
    "name": "Pack",
    "summary": "Create lootboxes of NFTs with rarity based open mechanics.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getPack(\"{{contract_address}}\");",
      "react": "import { usePack } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const pack = usePack(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the pack contract in the rest of the component\n}"
    },
    "methods": [
      {
        "name": "createTo",
        "summary": "Create Pack To Wallet\n\n",
        "remarks": "\n\nCreate a new pack with the given metadata and rewards and mint it to the specified address.\n\n",
        "examples": {
          "javascript": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantity: 100,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantity: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.createTo(\"0x...\", pack);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Pack.createTo",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Packs\n\n",
        "remarks": "\n\nGet all the data associated with every pack in this contract.\n\nBy default, returns the first 100 packs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const packs = await contract.getAll();\nconsole.log(packs;",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Pack.getAll",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned Packs\n\n",
        "remarks": "\n\nGet all the data associated with the packs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the packs of\nconst address = \"{{wallet_address}}\";\nconst packss = await contract.getOwned(address);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Pack.getOwned",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getPackContents",
        "summary": "Get Pack Contents\n\n",
        "remarks": "\n\nGet the rewards contained inside a pack.\n\n",
        "examples": {
          "javascript": "const packId = 0;\nconst contents = await contract.getPackContents(packId);\nconsole.log(contents.erc20Rewards);\nconsole.log(contents.erc721Rewards);\nconsole.log(contents.erc1155Rewards);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Pack.getPackContents",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "open",
        "summary": "Open Pack\n\n",
        "remarks": "\n\n- Open a pack to reveal the contained rewards. This will burn the specified pack and the contained assets will be transferred to the opening users wallet.\n\n",
        "examples": {
          "javascript": "const tokenId = 0\nconst amount = 1\nconst tx = await contract.open(tokenId, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Pack.open",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.airdrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.balanceOf",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.get",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc1155.transfer",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per pack\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular pack\ncontract.royalties.setTokenRoyaltyInfo(packId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Pack"
    }
  },
  "Vote": {
    "name": "Vote",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getVote(\"{{contract_address}}\");",
      "react": "import { useVote } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const vote = useVote(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the vote contract in the rest of the component\n}"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.canExecute",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.execute",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this contract.\n\n",
        "examples": {
          "javascript": "const proposals = await contract.getAll();\nconsole.log(proposals);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.getAll",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.hasVoted",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to setup in code)\n    transactionData: tokenContract.encoder.encode(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.propose",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Vote.vote",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Vote"
    }
  },
  "Multiwrap": {
    "name": "Multiwrap",
    "summary": "Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst contract = sdk.getMultiwrap(\"{{contract_address}}\");",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_multiwrap(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetMultiwrap(\"{{contract_address}}\")\n"
    },
    "methods": [
      {
        "name": "getAll",
        "summary": "Get All Wrapped Token Bundles\n\n",
        "remarks": "\n\nGet all the data associated with every token bundle in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const wrappedBundles = await contract.getAll();\nconsole.log(wrappedBundles);",
          "python": "nfts = contract.get_all()\nprint(nfts)",
          "go": "nfts, err := contract.GetAll()\nownerOne := nfts[0].Owner\nnameOne := nfts[0].Metadata.Name\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Multiwrap.getAll",
          "python": "https://docs.thirdweb.com/python/erc721#get_all",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-getall",
          "react": ""
        }
      },
      {
        "name": "getWrappedContents",
        "summary": "Get the contents of a wrapped token bundle\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contents = await contract.getWrappedContents(wrappedTokenId);\nconsole.log(contents.erc20Tokens);\nconsole.log(contents.erc721Tokens);\nconsole.log(contents.erc1155Tokens);",
          "python": "token_id = 0\ncontents = contract.get_wrapped_contents(token_id)\nprint(contents.erc20_tokens)\nprint(contents.erc721_tokens)\nprint(contents.erc1155_tokens)",
          "go": "tokenId := 0\ncontents, err := contract.GetWrappedContents(tokenId)\nerc20Tokens := contents.Erc20Tokens\nerc721Tokens := contents.Erc721Tokens\nerc1155Tokens := contents.Erc1155Tokens\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Multiwrap.getWrappedContents",
          "python": "https://docs.thirdweb.com/python/multiwrap#get_wrapped_contents",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-getwrappedcontents",
          "react": ""
        }
      },
      {
        "name": "unwrap",
        "summary": "Unwrap a wrapped token bundle, and retrieve its contents\n\n",
        "remarks": null,
        "examples": {
          "javascript": "await contract.unwrap(wrappedTokenId);",
          "python": "tx = contract.unwrap(wrapped_token_id, receipientAddress)",
          "go": "tokenId := 0\ntx, err := contract.Unwrap(tokenId, \"\")\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Multiwrap.unwrap",
          "python": "https://docs.thirdweb.com/python/multiwrap#unwrap",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-unwrap",
          "react": ""
        }
      },
      {
        "name": "wrap",
        "summary": "Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tx = await contract.wrap({\n  erc20Tokens: [{\n    contractAddress: \"0x...\",\n    quantity: \"0.8\"\n  }],\n  erc721Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"0\"\n  }],\n  erc1155Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"1\",\n    quantity: \"2\"\n  }]\n}, {\n    name: \"Wrapped bundle\",\n    description: \"This is a wrapped bundle of tokens and NFTs\",\n    image: \"ipfs://...\",\n});\nconst receipt = tx.receipt(); // the transaction receipt\nconst wrappedTokenId = tx.id; // the id of the wrapped token bundle",
          "python": "from thirdweb.types import (\n    TokensToWrap,\n    ERC20Wrappable,\n    ERC721Wrappable,\n    ERC1155Wrappable,\n    NFTMetadataInput,\n)\n\n# Contract setup goes here...\n\ntx = contract.wrap(\n    TokensToWrap(\n        erc20_tokens=[\n            ERC20Wrappable(contract_address=\"0x...\", quantity=0.8),\n        ],\n        erc721_tokens=[\n            ERC721Wrappable(contract_address=\"0x...\", token_id=0),\n        ],\n        erc1155_tokens=[\n            ERC1155Wrappable(contract_address=\"0x...\", token_id=0, quantity=1),\n        ]\n    ),\n    NFTMetadataInput(\n        name=\"Wrapped NFT\",\n        description=\"This is a wrapped bundle of tokens and NFTs\",\n        image=\"ipfs://...\",\n    )\n)\n\nprint(tx.receipt, tx.id)",
          "go": "contents := &thirdweb.MultiwrapBundle{\n\tERC20Tokens: []*thirdweb.MultiwrapERC20{\n\t\t&thirdweb.MultiwrapERC20{\n\t\t\tContractAddress: \"0x...\",\n\t\t\tQuantity:        1,\n\t\t},\n\t},\n\tERC721Tokens: []*thirdweb.MultiwrapERC721{\n\t\t&thirdweb.MultiwrapERC721{\n\t\t\tContractAddress: \"0x...\",\n\t\t\tTokenId:         1,\n\t\t},\n\t},\n\tERC1155Tokens: []*thirdweb.MultiwrapERC1155{\n\t\t&thirdweb.MultiwrapERC1155{\n\t\t\tContractAddress: \"0x...\",\n\t\t\tTokenId:         1,\n\t\t\tQuantity:        1,\n\t\t},\n\t},\n}\n\nwrappedTokenMetadata := &thirdweb.NFTMetadataInput{\n\tName: \"Wrapped Token\"\n}\n\n// This will mint the wrapped token to the connected wallet\ntx, err := contract.Wrap(contents, wrappedTokenMetadata, \"\")\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Multiwrap.wrap",
          "python": "https://docs.thirdweb.com/python/multiwrap#wrap",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-wrap",
          "react": ""
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.nft.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "balance = contract.balance_of(\"{{wallet_address}}\")\nprint(balance)",
          "go": "address := \"{{wallet_address}}\"\nbalance, err := contract.BalanceOf(address)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.balanceOf",
          "python": "https://docs.thirdweb.com/python/erc721#balance_of",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-balanceof",
          "react": ""
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.nft.get(tokenId);",
          "python": "nft = contract.get(0)\nprint(nft)",
          "go": "nft, err := contract.Get(0)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.get",
          "python": "https://docs.thirdweb.com/python/erc721#get",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-get",
          "react": ""
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.nft.transfer(walletAddress, tokenId);",
          "python": "to = \"{{wallet_address}}\"\ntoken_id = 0\n\nreceipt = contract.transfer(to, token_id)",
          "go": "to := \"0x...\"\ntokenId := 0\n\ntx, err := contract.Transfer(to, tokenId)\n",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.Erc721.transfer",
          "python": "https://docs.thirdweb.com/python/erc721#transfer",
          "go": "https://docs.thirdweb.com/go/multiwrap#func-multiwrap-transfer",
          "react": ""
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": ""
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.Multiwrap",
      "python": "https://docs.thirdweb.com/python/multiwrap",
      "go": "https://docs.thirdweb.com/go/multiwrap"
    }
  },
  "ContractDeployer": {
    "name": "ContractDeployer",
    "summary": "Handles deploying new contracts\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "deployEdition",
        "summary": "Deploys a new Edition contract\n\n",
        "remarks": "\n\nDeploys an Edition contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployEdition",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployEditionDrop",
        "summary": "Deploys a new EditionDrop contract\n\n",
        "remarks": "\n\nDeploys an Edition Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployEditionDrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployMarketplace",
        "summary": "Deploys a new Marketplace contract\n\n",
        "remarks": "\n\nDeploys a Marketplace contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployMarketplace",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployMultiwrap",
        "summary": "Deploys a new Multiwrap contract\n\n",
        "remarks": "\n\nDeploys a Multiwrap contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployMultiwrap",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployNFTCollection",
        "summary": "Deploys an NFT Collection contract\n\n",
        "remarks": "\n\nDeploys an NFT Collection contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployNFTCollection",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployNFTDrop",
        "summary": "Deploys a new NFTDrop contract\n\n",
        "remarks": "\n\nDeploys an NFT Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployNFTDrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployPack",
        "summary": "Deploys a new Pack contract\n\n",
        "remarks": "\n\nDeploys a Pack contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployPack",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deploySplit",
        "summary": "Deploys a new Split contract\n\n",
        "remarks": "\n\nDeploys a Split contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deploySplit",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployToken",
        "summary": "Deploys a new Token contract\n\n",
        "remarks": "\n\nDeploys a Token contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployToken",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployTokenDrop",
        "summary": "Deploys a new Token Drop contract\n\n",
        "remarks": "\n\nDeploys a Token Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployTokenDrop",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "deployVote",
        "summary": "Deploys a new Vote contract\n\n",
        "remarks": "\n\nDeploys an Vote contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer.deployVote",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer"
    }
  },
  "ContractEvents": {
    "name": "ContractEvents",
    "summary": "Listen to Contract events in real time\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "addEventListener",
        "summary": "Subscribe to contract events\n\n",
        "remarks": "\n\nYou can add a listener for any contract event to run a function when the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event, you could do the following:\n\n",
        "examples": {
          "javascript": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.addEventListener",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "addTransactionListener",
        "summary": "Subscribe to transactions in this contract.\n\n",
        "remarks": "\n\nWill emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n\n",
        "examples": {
          "javascript": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.addTransactionListener",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getAllEvents",
        "summary": "Get All Events\n\n",
        "remarks": "\n\nGet a list of all the events emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.getAllEvents",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getEvents",
        "summary": "Get Events\n\n",
        "remarks": "\n\nGet a list of the events of a specific type emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getEvents(eventName, filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.getEvents",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "listenToAllEvents",
        "summary": "Listen to all events emitted from this contract\n\n",
        "remarks": null,
        "examples": {
          "javascript": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.listenToAllEvents",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "removeAllListeners",
        "summary": "Remove all listeners on this contract\n\n",
        "remarks": "\n\nRemove all listeners from a contract\n\n",
        "examples": {
          "javascript": "contract.events.removeAllListeners();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.removeAllListeners",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "removeEventListener",
        "summary": "Remove an event listener from this contract\n\n",
        "remarks": "\n\nRemove a listener that was added with addEventListener\n\n",
        "examples": {
          "javascript": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.removeEventListener",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "removeTransactionListener",
        "summary": "Remove a transaction listener\n\n",
        "remarks": "\n\nRemove a listener that was added with addTransactionListener\n\n",
        "examples": {
          "javascript": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents.removeTransactionListener",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents"
    }
  },
  "DelayedReveal": {
    "name": "DelayedReveal",
    "summary": "Handles delayed reveal logic\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "createDelayedRevealBatch",
        "summary": "Create a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time!\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal.createDelayedRevealBatch",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "getBatchesToReveal",
        "summary": "Gets the list of unrevealed NFT batches.\n\n",
        "remarks": "\n\nGets the list of unrevealed NFT batches.\n\n",
        "examples": {
          "javascript": "const batches = await contract.revealer.getBatchesToReveal();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal.getBatchesToReveal",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "reveal",
        "summary": "Reveal a batch of hidden NFTs\n\n",
        "remarks": "\n\nReveal the NFTs of a batch using the password.\n\n",
        "examples": {
          "javascript": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal.reveal",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal"
    }
  },
  "GasCostEstimator": {
    "name": "GasCostEstimator",
    "summary": "Estimates the gas cost of Contract calls\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "currentGasPriceInGwei",
        "summary": "Returns the current gas price in gwei\n\n",
        "remarks": "\n\nGet the current gas price in gwei\n\n",
        "examples": {
          "javascript": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.GasCostEstimator.currentGasPriceInGwei",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "gasCostOf",
        "summary": "Estimates the cost of gas in native token of the current chain\n\n",
        "remarks": "\n\nEstimate the cost of gas in native token of the current chain\n\n",
        "examples": {
          "javascript": "const costOfBurn = await contract?.estimator.gasCostOf(\"burn\", [0]);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.GasCostEstimator.gasCostOf",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.GasCostEstimator"
    }
  },
  "RemoteStorage": {
    "name": "RemoteStorage",
    "summary": "Fetch and upload files to IPFS or any other storage.\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "fetch",
        "summary": "Fetch data from any IPFS hash without worrying about gateways, data types, etc. Simply pass in an IPFS url and we'll handle fetching for you and try every public gateway to get the fastest response.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Your IPFS hash here\nconst hash = \"ipfs://...\"\nconst data = await sdk.storage.fetch(hash);",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.RemoteStorage.fetch",
          "python": "",
          "go": "",
          "react": ""
        }
      },
      {
        "name": "upload",
        "summary": "Upload any data to an IPFS directory. We'll handle all the details for you, including pinning your files and making sure that you get the fastest upload speeds.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// File upload\nconst files = [\n  fs.readFileSync(\"file1.png\"),\n  fs.readFileSync(\"file2.png\"),\n]\nconst result = await sdk.storage.upload(files);\n// uri for each uploaded file will look like something like: ipfs://<hash>/0\n\n// JSON metadata upload\nconst jsonMetadata = {\n  name: \"Name\",\n  description: \"Description\",\n}\nconst result = await sdk.storage.upload(jsonMetadata);\n\n// Upload progress (browser only)\nconst result = await sdk.storage.upload(files, {\n  onProgress: (event: UploadProgressEvent) => {\n    console.log(`Downloaded ${event.progress} / ${event.total}`);\n  },\n});",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.RemoteStorage.upload",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.RemoteStorage"
    }
  },
  "ContractInterceptor": {
    "name": "ContractInterceptor",
    "summary": "Allows overriding transaction behavior for this contract\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "overrideNextTransaction",
        "summary": "The next transaction executed will add/replace any overrides passed via the passed in hook.\n\n",
        "remarks": "\n\nOverridden values will be applied to the next transaction executed.\n\n",
        "examples": {
          "javascript": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));",
          "python": "",
          "go": "",
          "react": ""
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.ContractInterceptor.overrideNextTransaction",
          "python": "",
          "go": "",
          "react": ""
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractInterceptor"
    }
  }
}