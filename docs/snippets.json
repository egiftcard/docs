{
  "ThirdwebSDK": {
    "name": "ThirdwebSDK",
    "summary": "The main entry point for the thirdweb SDK\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "fromPrivateKey",
        "summary": "Get an instance of the thirdweb SDK based on a private key.\n\n",
        "remarks": "\n\nThis should only be used for backend services or scripts, with the private key stored in a secure way. **NEVER** expose your private key to the public in any way.\n\n",
        "examples": {
          "javascript": "const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromprivatekey",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromprivatekey"
        }
      },
      {
        "name": "fromSigner",
        "summary": "Get an instance of the thirdweb SDK based on an existing ethers signer\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// get a signer from somewhere (createRandom is being used purely for example purposes)\nconst signer = ethers.Wallet.createRandom();\n\n// get an instance of the SDK with the signer already setup\nconst sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// get a signer from somewhere (createRandom is being used purely for example purposes)\nconst signer = ethers.Wallet.createRandom();\n\n// get an instance of the SDK with the signer already setup\nconst sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromsigner",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromsigner"
        }
      },
      {
        "name": "getBalance",
        "summary": "Get the native balance of a given address (wallet or contract)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await sdk.getBalance(\"0x...\");\nconsole.log(balance.displayValue);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst balance = await sdk.getBalance(\"0x...\");\nconsole.log(balance.displayValue);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getbalance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getbalance"
        }
      },
      {
        "name": "getContract",
        "summary": "Get an instance of a Custom ThirdwebContract\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contract = sdk.getContract(\"{{contract_address}}\");",
          "python": "",
          "go": "",
          "react": "const { contract, isLoading, error } = useContract(\"{{contract_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontract",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usecontract"
        }
      },
      {
        "name": "getContractFromAbi",
        "summary": "Get an instance of a Custom contract from a json ABI\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Import your ABI from a JSON file\nimport myABI from \"./path/to/myABI.json\";\n\nconst contract = sdk.getContractFromAbi(\n  \"{{contract_address}}\",\n  // Pass in the \"abi\" field from the JSON file\n  myABI.abi\n);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// Import your ABI from a JSON file\nimport myABI from \"./path/to/myABI.json\";\n\nconst contract = sdk.getContractFromAbi(\n  \"{{contract_address}}\",\n  // Pass in the \"abi\" field from the JSON file\n  myABI.abi\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractfromabi",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractfromabi"
        }
      },
      {
        "name": "getContractList",
        "summary": "Return all the contracts deployed by the specified address\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contracts = sdk.getContractList(\"{{wallet_address}}\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contracts = sdk.getContractList(\"{{wallet_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractlist",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractlist"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ThirdwebSDK"
    }
  },
  "NFTCollection": {
    "name": "NFTCollectionImpl",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getNFTCollection(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a single NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burnToken(tokenId);",
          "python": "",
          "go": "",
          "react": "const result = await contract.burnToken(tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftcollectionimpl.burn",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftcollectionimpl.burn"
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many unique NFTs\n\n",
        "remarks": "\n\nMint many unique NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftcollectionimpl.mintbatchto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftcollectionimpl.mintbatchto"
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint a unique NFT\n\n",
        "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftcollectionimpl.mintto",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usemintnft"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.get(tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getowned",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useownednfts"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature().generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted",
          "python": "",
          "go": "",
          "react": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature().generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc721withquantitysignaturemintable",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.erc721withquantitysignaturemintable"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.NFTCollectionImpl"
    }
  },
  "Edition": {
    "name": "EditionImpl",
    "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getEdition(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a specified amount of a NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burnTokens(tokenId, amount);",
          "python": "",
          "go": "",
          "react": "const result = await contract.burnTokens(tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editionimpl.burn",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.editionimpl.burn"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editionimpl.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editionimpl.getowned",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useownednfts"
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs with limited supplies\n\n",
        "remarks": "\n\nMint many different NFTs with limited supplies to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editionimpl.mintbatchto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.editionimpl.mintbatchto"
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint an NFT with a limited supply\n\n",
        "remarks": "\n\nMint an NFT with a limited supply to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: mintNft,\n    isLoading,\n    error,\n  } = useMintNFT(contract);\n\n  if (error) {\n    console.error(\"failed to mint nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"0x...\" })}\n    >\n      Mint!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editionimpl.mintto",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usemintnft"
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted",
          "python": "",
          "go": "",
          "react": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc1155signaturemintable",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.erc1155signaturemintable"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.EditionImpl"
    }
  },
  "TokenDrop": {
    "name": "TokenDropImpl",
    "summary": "Create a Drop contract for a standard crypto token or cryptocurrency.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getTokenDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burnFrom",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the specified wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.burnfrom",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.burnfrom"
        }
      },
      {
        "name": "burnTokens",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
        "examples": {
          "javascript": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);",
          "python": "",
          "go": "",
          "react": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.burntokens",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.burntokens"
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim a certain amount of tokens to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim Tokens.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt",
          "python": "",
          "go": "",
          "react": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 42.69; // how many tokens you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.claimto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokendropimpl.claimto"
        }
      },
      {
        "name": "allowance",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowance"
        }
      },
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowanceof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowanceof"
        }
      },
      {
        "name": "balance",
        "summary": "Get Token Balance for the currently connected wallet\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "const balance = await contract.balance();",
          "python": "",
          "go": "",
          "react": "const balance = await contract.balance();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balance"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);",
          "python": "",
          "go": "",
          "react": "const { data: balance, isLoading, error } = useTokenBalance(<YourTokenContractInstance>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usetokenbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const token = await contract.get();",
          "python": "",
          "go": "",
          "react": "const token = await contract.get();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.get"
        }
      },
      {
        "name": "setAllowance",
        "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.setallowance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.setallowance"
        }
      },
      {
        "name": "totalSupply",
        "summary": "The total supply for this Token\n\n",
        "remarks": "\n\nGet how much supply has been minted\n\n",
        "examples": {
          "javascript": "const balance = await contract.totalSupply();",
          "python": "",
          "go": "",
          "react": "const balance = await contract.totalSupply();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.totalsupply",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.totalsupply"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transfer"
        }
      },
      {
        "name": "transferBatch",
        "summary": "Transfer Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens from the connected wallet to many wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);",
          "python": "",
          "go": "",
          "react": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferbatch"
        }
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferfrom",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferfrom"
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim Tokens, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 3117.42, // limit how many tokens are released in this presale\n    price: 0.001, // presale price per token\n    snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.008, // public sale price per token\n  }\n]);\nawait contract.claimConditions.set(claimConditions);",
          "python": "",
          "go": "",
          "react": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 3117.42, // limit how many tokens are released in this presale\n    price: 0.001, // presale price per token\n    snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.008, // public sale price per token\n  }\n]);\nawait contract.claimConditions.set(claimConditions);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.TokenDropImpl"
    }
  },
  "Token": {
    "name": "TokenImpl",
    "summary": "Create a standard crypto token or cryptocurrency.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getToken(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the connected wallet\n\n",
        "examples": {
          "javascript": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);",
          "python": "",
          "go": "",
          "react": "// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnTokens(amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.burn",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.burn"
        }
      },
      {
        "name": "burnFrom",
        "summary": "Burn Tokens\n\n",
        "remarks": "\n\nBurn tokens held by the specified wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet sending the tokens\nconst holderAddress = \"{{wallet_address}}\";\n\n// The amount of this token you want to burn\nconst amount = 1.2;\n\nawait contract.burnFrom(holderAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.burnfrom",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.burnfrom"
        }
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens to many wallets in one transaction.\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);",
          "python": "",
          "go": "",
          "react": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 0.2, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 1.4,\n }\n]\n\nawait contract.mintBatchTo(data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.mintbatchto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.mintbatchto"
        }
      },
      {
        "name": "mintTo",
        "summary": "Mint Tokens\n\n",
        "remarks": "\n\nMint tokens to a specified address.\n\n",
        "examples": {
          "javascript": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\n\nawait contract.mintTo(toAddress, amount);",
          "python": "",
          "go": "",
          "react": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\n\nawait contract.mintTo(toAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.mintto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.tokenimpl.mintto"
        }
      },
      {
        "name": "allowance",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\nconst allowance = await contract.allowance(spenderAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowance"
        }
      },
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet who owns the funds\nconst owner = \"{{wallet_address}}\";\n// Address of the wallet to check token allowance\nconst spender = \"0x...\";\nconst allowance = await contract.allowanceOf(owner, spender);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowanceof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.allowanceof"
        }
      },
      {
        "name": "balance",
        "summary": "Get Token Balance for the currently connected wallet\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "const balance = await contract.balance();",
          "python": "",
          "go": "",
          "react": "const balance = await contract.balance();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balance"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);",
          "python": "",
          "go": "",
          "react": "const { data: balance, isLoading, error } = useTokenBalance(<YourTokenContractInstance>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usetokenbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const token = await contract.get();",
          "python": "",
          "go": "",
          "react": "const token = await contract.get();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.get"
        }
      },
      {
        "name": "setAllowance",
        "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n// The number of tokens to give as allowance\nconst amount = 100\nawait contract.setAllowance(spenderAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.setallowance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.setallowance"
        }
      },
      {
        "name": "totalSupply",
        "summary": "The total supply for this Token\n\n",
        "remarks": "\n\nGet how much supply has been minted\n\n",
        "examples": {
          "javascript": "const balance = await contract.totalSupply();",
          "python": "",
          "go": "",
          "react": "const balance = await contract.totalSupply();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.totalsupply",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.totalsupply"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The amount of tokens you want to send\nconst amount = 0.1;\nawait contract.transfer(toAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transfer"
        }
      },
      {
        "name": "transferBatch",
        "summary": "Transfer Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens from the connected wallet to many wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);",
          "python": "",
          "go": "",
          "react": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferbatch"
        }
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n// The number of tokens you want to send\nconst amount = 1.2\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferfrom",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc20.transferfrom"
        }
      }
    ],
    "properties": [
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the tokens\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt",
          "python": "",
          "go": "",
          "react": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the tokens\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc20signaturemintable",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.erc20signaturemintable"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.TokenImpl"
    }
  },
  "NFTDrop": {
    "name": "NFTDropImpl",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getNFTDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "burn",
        "summary": "Burn a single NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burnToken(tokenId);",
          "python": "",
          "go": "",
          "react": "const result = await contract.burnToken(tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.burn",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.burn"
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim unique NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.claimto",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimnft"
        }
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of unique NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many unique NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT",
          "python": "",
          "go": "",
          "react": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.createbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.createbatch"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.get(tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAllClaimed",
        "summary": "Get All Claimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs (and their owners) that have been claimed in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;",
          "python": "",
          "go": "",
          "react": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.getallclaimed",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimednfts"
        }
      },
      {
        "name": "getAllUnclaimed",
        "summary": "Get All Unclaimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs that have been not been claimed yet in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;",
          "python": "",
          "go": "",
          "react": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.getallunclaimed",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useunclaimednfts"
        }
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the claimed supply\n\n",
        "remarks": "\n\nGet the number of claimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);",
          "python": "",
          "go": "",
          "react": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.totalclaimedsupply",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
        }
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the unclaimed supply\n\n",
        "remarks": "\n\nGet the number of unclaimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);",
          "python": "",
          "go": "",
          "react": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.totalunclaimedsupply",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.transfer"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.get(tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getowned",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useownednfts"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.nftdropimpl.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.claimConditions.set(claimConditions);",
          "python": "",
          "go": "",
          "react": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait contract.claimConditions.set(claimConditions);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions"
        }
      },
      {
        "name": "revealer",
        "summary": "Delayed reveal\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal"
        }
      },
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.NFTDropImpl"
    }
  },
  "EditionDrop": {
    "name": "EditionDropImpl",
    "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getEditionDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burnTokens",
        "summary": "Burn a specified amount of a NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burnTokens(tokenId, amount);",
          "python": "",
          "go": "",
          "react": "const result = await contract.burnTokens(tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.burntokens",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.burntokens"
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.claimTo(address, tokenId, quantity);\nconst receipt = tx.receipt; // the transaction receipt",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.claimto",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimnft"
        }
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT",
          "python": "",
          "go": "",
          "react": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.createbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.createbatch"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.getowned",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.editiondropimpl.getowned"
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");",
          "python": "",
          "go": "",
          "react": "const nft = await contract.get(\"0\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.get"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions for each NFT\n\n",
        "remarks": "\n\nDefine who can claim each NFT in the edition, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nconst tokenId = 0; // the id of the NFT to set claim conditions on\nawait contract.claimConditions.set(tokenId, claimConditions);",
          "python": "",
          "go": "",
          "react": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nconst tokenId = 0; // the id of the NFT to set claim conditions on\nawait contract.claimConditions.set(tokenId, claimConditions);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.droperc1155claimconditions",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.droperc1155claimconditions"
        }
      },
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.EditionDropImpl"
    }
  },
  "Marketplace": {
    "name": "MarketplaceImpl",
    "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getMarketplace(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Purchase NFTs\n\n",
        "remarks": "\n\nBuy a Direct or Auction listing on your marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutListing(listingId, quantityDesired);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.buyoutlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.buyoutlisting"
        }
      },
      {
        "name": "getActiveListings",
        "summary": "Get all active listings\n\n",
        "remarks": "\n\nFetch all the active listings from this marketplace contract. An active listing means it can be bought or bid on.\n\n",
        "examples": {
          "javascript": "const listings = await contract.getActiveListings();\nconst priceOfFirstActiveListing = listings[0].price;",
          "python": "",
          "go": "",
          "react": "const { data: listings, isLoading, error } = useActiveListings(<YourMarketplaceContractInstance>, { seller: \"0x...\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.getactivelistings",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useactivelistings"
        }
      },
      {
        "name": "getAllListings",
        "summary": "Get all the listings\n\n",
        "remarks": "\n\nFetch all the listings from this marketplace contract, including sold ones.\n\n",
        "examples": {
          "javascript": "const listings = await contract.getAllListings();\nconst priceOfFirstListing = listings[0].price;",
          "python": "",
          "go": "",
          "react": "const { data: listings, isLoading, error } = useListings(<YourMarketplaceContractInstance>, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.getalllistings",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.uselistings"
        }
      },
      {
        "name": "getListing",
        "summary": "Convenience function to get either a direct or auction listing\n\n",
        "remarks": "\n\nGet a listing by its listing id\n\n",
        "examples": {
          "javascript": "const listingId = 0;\nconst listing = await contract.getListing(listingId);",
          "python": "",
          "go": "",
          "react": "const { data: listing, isLoading, error } = useListing(<YourMarketplaceContractInstance>, <listingId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.getlisting",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.uselisting"
        }
      },
      {
        "name": "setBidBufferBps",
        "summary": "Set the Auction bid buffer\n\n",
        "remarks": "\n\nA percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n\n",
        "examples": {
          "javascript": "// the bid buffer in basis points\nconst bufferBps = 5_00; // 5%\nawait contract.setBidBufferBps(bufferBps);",
          "python": "",
          "go": "",
          "react": "// the bid buffer in basis points\nconst bufferBps = 5_00; // 5%\nawait contract.setBidBufferBps(bufferBps);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.setbidbufferbps",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.setbidbufferbps"
        }
      },
      {
        "name": "setTimeBufferInSeconds",
        "summary": "Set the Auction Time buffer:\n\n",
        "remarks": "\n\nMeasured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n\n",
        "examples": {
          "javascript": "// the time buffer in seconds\nconst bufferInSeconds = 60;\nawait contract.setTimeBufferInSeconds(bufferInSeconds);",
          "python": "",
          "go": "",
          "react": "// the time buffer in seconds\nconst bufferInSeconds = 60;\nawait contract.setTimeBufferInSeconds(bufferInSeconds);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.settimebufferinseconds",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceimpl.settimebufferinseconds"
        }
      }
    ],
    "properties": [
      {
        "name": "auction",
        "summary": "Auctions\n\n",
        "remarks": "\n\nCreate and manage auctions in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 2.6;\nawait contract.auction.makeBid(listingId, pricePerToken);",
          "python": "",
          "go": "",
          "react": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 2.6;\nawait contract.auction.makeBid(listingId, pricePerToken);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction"
        }
      },
      {
        "name": "direct",
        "summary": "Direct listings\n\n",
        "remarks": "\n\nCreate and manage direct listings in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the NFT contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\nawait contract.direct.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": "",
          "react": "// Data of the listing you want to create\nconst listing = {\n  // address of the NFT contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\nawait contract.direct.buyoutListing(listingId, quantityDesired);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceImpl"
    }
  },
  "MarketplaceDirect": {
    "name": "MarketplaceDirect",
    "summary": "Handles direct listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "acceptOffer",
        "summary": "Accept an offer on a direct listing\n\n",
        "remarks": "\n\nAccept an offer on a direct listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.acceptoffer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.acceptoffer"
        }
      },
      {
        "name": "buyoutListing",
        "summary": "Buy a Listing\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.direct.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyNow(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to buyout listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n    >\n      Buy listing!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.buyoutlisting",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usebuynow"
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Direct Listing\n\n",
        "remarks": "\n\nCancel a direct listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.cancellisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.cancellisting"
        }
      },
      {
        "name": "createListing",
        "summary": "Create Direct Listing\n\n",
        "remarks": "\n\nCreate a new listing on the marketplace where people can buy an asset directly.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.createlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.createlisting"
        }
      },
      {
        "name": "makeOffer",
        "summary": "Make an offer for a Direct Listing\n\n",
        "remarks": "\n\nMake an offer on a direct listing\n\n",
        "examples": {
          "javascript": "import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nimport { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.makeoffer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.makeoffer"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect"
    }
  },
  "MarketplaceAuction": {
    "name": "MarketplaceAuction",
    "summary": "Handles auction listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Buyout Auction\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.buyoutlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.buyoutlisting"
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Auction Listing\n\n",
        "remarks": "\n\nCancel an auction listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.cancellisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.cancellisting"
        }
      },
      {
        "name": "closeListing",
        "summary": "Close the Auction\n\n",
        "remarks": "\n\nCloses the Auction and executes the sale.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.closelisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.closelisting"
        }
      },
      {
        "name": "createListing",
        "summary": "Create Auction\n\n",
        "remarks": "\n\nCreate a new auction where people can bid on an asset.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.createlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.createlisting"
        }
      },
      {
        "name": "getWinner",
        "summary": "Get Auction Winner\n\n",
        "remarks": "\n\nGet the winner of the auction after an auction ends.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinner",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinner"
        }
      },
      {
        "name": "getWinningBid",
        "summary": "Get Highest Bid\n\n",
        "remarks": "\n\nGet the current highest bid of an active auction.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": "const { data: winningBid, isLoading, error } = useWinningBid(<YourMarketplaceContractInstance>, <listingId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinningbid",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usewinningbid"
        }
      },
      {
        "name": "makeBid",
        "summary": "Bid On Auction\n\n",
        "remarks": "\n\nMake a bid on an auction listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 1;\n\nawait contract.auction.makeBid(listingId, pricePerToken);",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const {\n    mutate: makeBid,\n    isLoading,\n    error,\n  } = useMakeBid(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeBid({ listingId: 1, bid: 2 })}\n    >\n      Bid!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.makebid",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usemakebid"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction"
    }
  },
  "Split": {
    "name": "SplitImpl",
    "summary": "Create custom royalty splits to distribute funds.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getSplit(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await contract.balanceOf(address);\nconsole.log(funds);",
          "python": "",
          "go": "",
          "react": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await contract.balanceOf(address);\nconsole.log(funds);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.balanceof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.balanceof"
        }
      },
      {
        "name": "balanceOfToken",
        "summary": "Get non-native Token Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await contract.balanceOfToken(address, tokenAddress);\nconsole.log(funds);",
          "python": "",
          "go": "",
          "react": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await contract.balanceOfToken(address, tokenAddress);\nconsole.log(funds);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.balanceoftoken",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.balanceoftoken"
        }
      },
      {
        "name": "distribute",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "await contract.distribute();",
          "python": "",
          "go": "",
          "react": "await contract.distribute();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.distribute",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.distribute"
        }
      },
      {
        "name": "distributeToken",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait contract.distributeToken(tokenAddress);",
          "python": "",
          "go": "",
          "react": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait contract.distributeToken(tokenAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.distributetoken",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.distributetoken"
        }
      },
      {
        "name": "getAllRecipients",
        "summary": "Get Recipients of this splits contract\n\n",
        "remarks": "\n\nGet the data about the shares of every split recipient on the contract\n\n",
        "examples": {
          "javascript": "const recipients = await contract.getAllRecipients();\nconsole.log(recipients);",
          "python": "",
          "go": "",
          "react": "const recipients = await contract.getAllRecipients();\nconsole.log(recipients);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.getallrecipients",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.getallrecipients"
        }
      },
      {
        "name": "withdraw",
        "summary": "Withdraw Funds\n\n",
        "remarks": "\n\nTriggers a transfer to account of the amount of native currency they are owed.\n\n",
        "examples": {
          "javascript": "// the wallet address that wants to withdraw their funds\nconst walletAddress = \"{{wallet_address}}\"\nawait contract.withdraw(walletAddress);",
          "python": "",
          "go": "",
          "react": "// the wallet address that wants to withdraw their funds\nconst walletAddress = \"{{wallet_address}}\"\nawait contract.withdraw(walletAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.splitimpl.withdraw",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.splitimpl.withdraw"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.SplitImpl"
    }
  },
  "Pack": {
    "name": "PackImpl",
    "summary": "Create lootboxes of NFTs with rarity based open mechanics.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getPack(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "addPackContents",
        "summary": "Add Pack Contents\n\n",
        "remarks": "\n\nSee {@link Pack.addPackContents}\n\n",
        "examples": {
          "javascript": "const packContents = {\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n}\n\nconst tx = await contract.addPackContents(packId, packContents);",
          "python": "",
          "go": "",
          "react": "const packContents = {\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n}\n\nconst tx = await contract.addPackContents(packId, packContents);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.addpackcontents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.packimpl.addpackcontents"
        }
      },
      {
        "name": "create",
        "summary": "Create Pack\n\n",
        "remarks": "\n\nSee {@link Pack.createTo}\n\n",
        "examples": {
          "javascript": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.create(pack);",
          "python": "",
          "go": "",
          "react": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.create(pack);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.create",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.packimpl.create"
        }
      },
      {
        "name": "createTo",
        "summary": "Create Pack To Wallet\n\n",
        "remarks": "\n\nCreate a new pack with the given metadata and rewards and mint it to the specified address.\n\n",
        "examples": {
          "javascript": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.createTo(\"0x...\", pack);",
          "python": "",
          "go": "",
          "react": "const pack = {\n  // The metadata for the pack NFT itself\n  packMetadata: {\n    name: \"My Pack\",\n    description: \"This is a new pack\",\n    image: \"ipfs://...\",\n  },\n  // ERC20 rewards to be included in the pack\n  erc20Rewards: [\n    {\n      assetContract: \"0x...\",\n      quantityPerReward: 5,\n      quantity: 100,\n      totalRewards: 20,\n    }\n  ],\n  // ERC721 rewards to be included in the pack\n  erc721Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n    }\n  ],\n  // ERC1155 rewards to be included in the pack\n  erc1155Rewards: [\n    {\n      assetContract: \"0x...\",\n      tokenId: 0,\n      quantityPerReward: 1,\n      totalRewards: 100,\n    }\n  ],\n  openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n  rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n}\n\nconst tx = await contract.createTo(\"0x...\", pack);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.createto",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.packimpl.createto"
        }
      },
      {
        "name": "get",
        "summary": "Get a single Pack\n\n",
        "remarks": "\n\nGet all the data associated with every pack in this contract.\n\nBy default, returns the first 100 packs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const pack = await contract.get(0);\nconsole.log(packs;",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Packs\n\n",
        "remarks": "\n\nGet all the data associated with every pack in this contract.\n\nBy default, returns the first 100 packs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const packs = await contract.getAll();\nconsole.log(packs;",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned Packs\n\n",
        "remarks": "\n\nGet all the data associated with the packs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the packs of\nconst address = \"{{wallet_address}}\";\nconst packss = await contract.getOwned(address);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.getowned",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useownednfts"
        }
      },
      {
        "name": "getPackContents",
        "summary": "Get Pack Contents\n\n",
        "remarks": "\n\nGet the rewards contained inside a pack.\n\n",
        "examples": {
          "javascript": "const packId = 0;\nconst contents = await contract.getPackContents(packId);\nconsole.log(contents.erc20Rewards);\nconsole.log(contents.erc721Rewards);\nconsole.log(contents.erc1155Rewards);",
          "python": "",
          "go": "",
          "react": "const packId = 0;\nconst contents = await contract.getPackContents(packId);\nconsole.log(contents.erc20Rewards);\nconsole.log(contents.erc721Rewards);\nconsole.log(contents.erc1155Rewards);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.getpackcontents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.packimpl.getpackcontents"
        }
      },
      {
        "name": "open",
        "summary": "Open Pack\n\n",
        "remarks": "\n\n- Open a pack to reveal the contained rewards. This will burn the specified pack and the contained assets will be transferred to the opening users wallet.\n\n",
        "examples": {
          "javascript": "const tokenId = 0\nconst amount = 1\nconst tx = await contract.open(tokenId, amount);",
          "python": "",
          "go": "",
          "react": "const tokenId = 0\nconst amount = 1\nconst tx = await contract.open(tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.open",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.packimpl.open"
        }
      },
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);",
          "python": "",
          "go": "",
          "react": "// The token ID of the NFT you want to airdrop\nconst tokenId = \"0\";\n// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nawait contract.airdrop(tokenId, addresses);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst tokenId = \"0\";\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nawait contract.airdrop(tokenId, addresses);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.airdrop"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0; // Id of the NFT to check\nconst balance = await contract.balanceOf(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const pack = await contract.get(0);\nconsole.log(packs;",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.packimpl.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\nconst tokenId = \"0\"; // The token ID of the NFT you want to send\nconst amount = 3; // How many copies of the NFTs to transfer\nawait contract.transfer(toAddress, tokenId, amount);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc1155.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per pack\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular pack\ncontract.royalties.setTokenRoyaltyInfo(packId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular pack\ncontract.royalties.setTokenRoyaltyInfo(packId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.PackImpl"
    }
  },
  "Vote": {
    "name": "VoteImpl",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getVote(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);",
          "python": "",
          "go": "",
          "react": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.canexecute",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.canexecute"
        }
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);",
          "python": "",
          "go": "",
          "react": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.execute",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.execute"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this contract.\n\n",
        "examples": {
          "javascript": "const proposals = await contract.getAll();\nconsole.log(proposals);",
          "python": "",
          "go": "",
          "react": "const proposals = await contract.getAll();\nconsole.log(proposals);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.getall",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.getall"
        }
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);",
          "python": "",
          "go": "",
          "react": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.hasvoted",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.hasvoted"
        }
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to setup in code)\n    transactionData: tokenContract.encoder.encode(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);",
          "python": "",
          "go": "",
          "react": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to setup in code)\n    transactionData: tokenContract.encoder.encode(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.propose",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.propose"
        }
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);",
          "python": "",
          "go": "",
          "react": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.voteimpl.vote",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.voteimpl.vote"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.VoteImpl"
    }
  },
  "Multiwrap": {
    "name": "MultiwrapImpl",
    "summary": "Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getMultiwrap(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "getWrappedContents",
        "summary": "Get the contents of a wrapped token bundle\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contents = await contract.getWrappedContents(wrappedTokenId);\nconsole.log(contents.erc20Tokens);\nconsole.log(contents.erc721Tokens);\nconsole.log(contents.erc1155Tokens);",
          "python": "",
          "go": "",
          "react": "const contents = await contract.getWrappedContents(wrappedTokenId);\nconsole.log(contents.erc20Tokens);\nconsole.log(contents.erc721Tokens);\nconsole.log(contents.erc1155Tokens);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.getwrappedcontents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.getwrappedcontents"
        }
      },
      {
        "name": "unwrap",
        "summary": "Unwrap a wrapped token bundle, and retrieve its contents\n\n",
        "remarks": null,
        "examples": {
          "javascript": "await contract.unwrap(wrappedTokenId);",
          "python": "",
          "go": "",
          "react": "await contract.unwrap(wrappedTokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.unwrap",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.unwrap"
        }
      },
      {
        "name": "wrap",
        "summary": "Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tx = await contract.wrap({\n  erc20Tokens: [{\n    contractAddress: \"0x...\",\n    quantity: \"0.8\"\n  }],\n  erc721Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"0\"\n  }],\n  erc1155Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"1\",\n    quantity: \"2\"\n  }]\n}, {\n    name: \"Wrapped bundle\",\n    description: \"This is a wrapped bundle of tokens and NFTs\",\n    image: \"ipfs://...\",\n});\nconst receipt = tx.receipt(); // the transaction receipt\nconst wrappedTokenId = tx.id; // the id of the wrapped token bundle",
          "python": "",
          "go": "",
          "react": "const tx = await contract.wrap({\n  erc20Tokens: [{\n    contractAddress: \"0x...\",\n    quantity: \"0.8\"\n  }],\n  erc721Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"0\"\n  }],\n  erc1155Tokens: [{\n    contractAddress: \"0x...\",\n    tokenId: \"1\",\n    quantity: \"2\"\n  }]\n}, {\n    name: \"Wrapped bundle\",\n    description: \"This is a wrapped bundle of tokens and NFTs\",\n    image: \"ipfs://...\",\n});\nconst receipt = tx.receipt(); // the transaction receipt\nconst wrappedTokenId = tx.id; // the id of the wrapped token bundle"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.wrap",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.multiwrapimpl.wrap"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.get(tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getowned",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getowned"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MultiwrapImpl"
    }
  },
  "ContractDeployer": {
    "name": "ContractDeployer",
    "summary": "Handles deploying new contracts\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "deployEdition",
        "summary": "Deploys a new Edition contract\n\n",
        "remarks": "\n\nDeploys an Edition contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployedition",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployedition"
        }
      },
      {
        "name": "deployEditionDrop",
        "summary": "Deploys a new EditionDrop contract\n\n",
        "remarks": "\n\nDeploys an Edition Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployeditiondrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployeditiondrop"
        }
      },
      {
        "name": "deployMarketplace",
        "summary": "Deploys a new Marketplace contract\n\n",
        "remarks": "\n\nDeploys a Marketplace contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymarketplace",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymarketplace"
        }
      },
      {
        "name": "deployMultiwrap",
        "summary": "Deploys a new Multiwrap contract\n\n",
        "remarks": "\n\nDeploys a Multiwrap contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymultiwrap",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymultiwrap"
        }
      },
      {
        "name": "deployNFTCollection",
        "summary": "Deploys an NFT Collection contract\n\n",
        "remarks": "\n\nDeploys an NFT Collection contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftcollection",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftcollection"
        }
      },
      {
        "name": "deployNFTDrop",
        "summary": "Deploys a new NFTDrop contract\n\n",
        "remarks": "\n\nDeploys an NFT Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftdrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftdrop"
        }
      },
      {
        "name": "deployPack",
        "summary": "Deploys a new Pack contract\n\n",
        "remarks": "\n\nDeploys a Pack contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploypack",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploypack"
        }
      },
      {
        "name": "deploySignatureDrop",
        "summary": "Deploys a new SignatureDrop contract\n\n",
        "remarks": "\n\nDeploys a SignatureDrop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deploySignatureDrop({\n  name: \"My Signature Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deploySignatureDrop({\n  name: \"My Signature Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysignaturedrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysignaturedrop"
        }
      },
      {
        "name": "deploySplit",
        "summary": "Deploys a new Split contract\n\n",
        "remarks": "\n\nDeploys a Split contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysplit",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysplit"
        }
      },
      {
        "name": "deployToken",
        "summary": "Deploys a new Token contract\n\n",
        "remarks": "\n\nDeploys a Token contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytoken",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytoken"
        }
      },
      {
        "name": "deployTokenDrop",
        "summary": "Deploys a new Token Drop contract\n\n",
        "remarks": "\n\nDeploys a Token Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytokendrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytokendrop"
        }
      },
      {
        "name": "deployVote",
        "summary": "Deploys a new Vote contract\n\n",
        "remarks": "\n\nDeploys an Vote contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployvote",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployvote"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer"
    }
  },
  "ContractEvents": {
    "name": "ContractEvents",
    "summary": "Listen to Contract events in real time\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "addEventListener",
        "summary": "Subscribe to contract events\n\n",
        "remarks": "\n\nYou can add a listener for any contract event to run a function when the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event, you could do the following:\n\n",
        "examples": {
          "javascript": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.addeventlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.addeventlistener"
        }
      },
      {
        "name": "addTransactionListener",
        "summary": "Subscribe to transactions in this contract.\n\n",
        "remarks": "\n\nWill emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n\n",
        "examples": {
          "javascript": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}",
          "python": "",
          "go": "",
          "react": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.addtransactionlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.addtransactionlistener"
        }
      },
      {
        "name": "getAllEvents",
        "summary": "Get All Events\n\n",
        "remarks": "\n\nGet a list of all the events emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.getallevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.getallevents"
        }
      },
      {
        "name": "getEvents",
        "summary": "Get Events\n\n",
        "remarks": "\n\nGet a list of the events of a specific type emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getEvents(eventName, filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getEvents(eventName, filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.getevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.getevents"
        }
      },
      {
        "name": "listenToAllEvents",
        "summary": "Listen to all events emitted from this contract\n\n",
        "remarks": null,
        "examples": {
          "javascript": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}",
          "python": "",
          "go": "",
          "react": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.listentoallevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.listentoallevents"
        }
      },
      {
        "name": "removeAllListeners",
        "summary": "Remove all listeners on this contract\n\n",
        "remarks": "\n\nRemove all listeners from a contract\n\n",
        "examples": {
          "javascript": "contract.events.removeAllListeners();",
          "python": "",
          "go": "",
          "react": "contract.events.removeAllListeners();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removealllisteners",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removealllisteners"
        }
      },
      {
        "name": "removeEventListener",
        "summary": "Remove an event listener from this contract\n\n",
        "remarks": "\n\nRemove a listener that was added with addEventListener\n\n",
        "examples": {
          "javascript": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removeeventlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removeeventlistener"
        }
      },
      {
        "name": "removeTransactionListener",
        "summary": "Remove a transaction listener\n\n",
        "remarks": "\n\nRemove a listener that was added with addTransactionListener\n\n",
        "examples": {
          "javascript": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}",
          "python": "",
          "go": "",
          "react": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removetransactionlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removetransactionlistener"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents"
    }
  },
  "DelayedReveal": {
    "name": "DelayedReveal",
    "summary": "Handles delayed reveal logic\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "createDelayedRevealBatch",
        "summary": "Create a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);",
          "python": "",
          "go": "",
          "react": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.createdelayedrevealbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.createdelayedrevealbatch"
        }
      },
      {
        "name": "getBatchesToReveal",
        "summary": "Gets the list of unrevealed NFT batches.\n\n",
        "remarks": "\n\nGets the list of unrevealed NFT batches.\n\n",
        "examples": {
          "javascript": "const batches = await contract.revealer.getBatchesToReveal();",
          "python": "",
          "go": "",
          "react": "const batches = await contract.revealer.getBatchesToReveal();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.getbatchestoreveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.getbatchestoreveal"
        }
      },
      {
        "name": "reveal",
        "summary": "Reveal a batch of hidden NFTs\n\n",
        "remarks": "\n\nReveal the NFTs of a batch using the password.\n\n",
        "examples": {
          "javascript": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.reveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.reveal"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal"
    }
  },
  "GasCostEstimator": {
    "name": "GasCostEstimator",
    "summary": "Estimates the gas cost of Contract calls\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "currentGasPriceInGwei",
        "summary": "Returns the current gas price in gwei\n\n",
        "remarks": "\n\nGet the current gas price in gwei\n\n",
        "examples": {
          "javascript": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();",
          "python": "",
          "go": "",
          "react": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.currentgaspriceingwei",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.currentgaspriceingwei"
        }
      },
      {
        "name": "gasCostOf",
        "summary": "Estimates the cost of gas in native token of the current chain Pass in the same parameters as the contract's function.\n\n",
        "remarks": "\n\nEstimate the cost of gas in native token of the current chain\n\n",
        "examples": {
          "javascript": "const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);",
          "python": "",
          "go": "",
          "react": "const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gascostof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gascostof"
        }
      },
      {
        "name": "gasLimitOf",
        "summary": "Estimates the gas limit of a transaction Pass in the same parameters as the contract's function.\n\n",
        "remarks": "\n\nEstimates the gas limit of a transaction\n\n",
        "examples": {
          "javascript": "const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);",
          "python": "",
          "go": "",
          "react": "const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gaslimitof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gaslimitof"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.GasCostEstimator"
    }
  },
  "RemoteStorage": {
    "name": "RemoteStorage",
    "summary": "",
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "ContractInterceptor": {
    "name": "ContractInterceptor",
    "summary": "Allows overriding transaction behavior for this contract\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "overrideNextTransaction",
        "summary": "The next transaction executed will add/replace any overrides passed via the passed in hook.\n\n",
        "remarks": "\n\nOverridden values will be applied to the next transaction executed.\n\n",
        "examples": {
          "javascript": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));",
          "python": "",
          "go": "",
          "react": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractinterceptor.overridenexttransaction",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractinterceptor.overridenexttransaction"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractInterceptor"
    }
  },
  "ContractMetadata": {
    "name": "ContractMetadata",
    "summary": "Handles metadata for a Contract\n\n",
    "examples": {
      "javascript": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst metadata = await contract.metadata.get();\nawait contract.metadata.set({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
    },
    "methods": [
      {
        "name": "get",
        "summary": "Get the metadata of a contract\n\n",
        "remarks": "\n\nGet the metadata of a contract\n\n",
        "examples": {
          "javascript": "const metadata = await contract.metadata.get();",
          "python": "",
          "go": "",
          "react": "const metadata = await contract.metadata.get();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.get"
        }
      },
      {
        "name": "set",
        "summary": "Set the metadata of a contract\n\n",
        "remarks": "\n\nOVERWRITE the metadata of a contract\n\n",
        "examples": {
          "javascript": "await contract.metadata.set({\n name: \"My Contract\",\n description: \"My contract description\"\n})",
          "python": "",
          "go": "",
          "react": "await contract.metadata.set({\n name: \"My Contract\",\n description: \"My contract description\"\n})"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.set",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.set"
        }
      },
      {
        "name": "update",
        "summary": "Update the metadata of a contract\n\n",
        "remarks": "\n\nUpdate the metadata of a contract\n\n",
        "examples": {
          "javascript": "await contract.metadata.update({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})",
          "python": "",
          "go": "",
          "react": "await contract.metadata.update({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.update",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.update"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractMetadata"
    }
  },
  "ContractRoles": {
    "name": "ContractRoles",
    "summary": "Handle contract permissions\n\n",
    "examples": {
      "javascript": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst rolesAndMembers = await contract.roles.getAll();\nawait contract.roles.grantRole(\"admin\", \"0x...\");"
    },
    "methods": [
      {
        "name": "get",
        "summary": "Call this to get a list of addresses that are members of a specific role.\n\n",
        "remarks": "\n\nSee {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n\n",
        "examples": {
          "javascript": "const minterAddresses = await contract.roles.get(\"minter\");",
          "python": "",
          "go": "",
          "react": "const minterAddresses = await contract.roles.get(\"minter\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.get"
        }
      },
      {
        "name": "getAll",
        "summary": "Call this to get get a list of addresses for all supported roles on the contract.\n\n",
        "remarks": "\n\nSee {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n\n",
        "examples": {
          "javascript": "const rolesAndMembers = await contract.roles.getAll();",
          "python": "",
          "go": "",
          "react": "const rolesAndMembers = await contract.roles.getAll();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.getall",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.getall"
        }
      },
      {
        "name": "grant",
        "summary": "Call this to grant a role to a specific address.\n\n",
        "remarks": "\n\nMake sure you are sure you want to grant the role to the address.\n\n",
        "examples": {
          "javascript": "await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");",
          "python": "",
          "go": "",
          "react": "await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.grant",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.grant"
        }
      },
      {
        "name": "revoke",
        "summary": "Call this to revoke a role from a specific address.\n\n",
        "remarks": "\n\n-- Caution --\n\nThis will let you remove yourself from the role, too. If you remove yourself from the admin role, you will no longer be able to administer the contract. There is no way to recover from this.\n\n",
        "examples": {
          "javascript": "await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");",
          "python": "",
          "go": "",
          "react": "await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.revoke",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.revoke"
        }
      },
      {
        "name": "setAll",
        "summary": "Call this to OVERWRITE the list of addresses that are members of specific roles.\n\nEvery role in the list will be overwritten with the new list of addresses provided with them. If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []",
          "python": "",
          "go": "",
          "react": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.setall",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.setall"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractRoles"
    }
  },
  "SignatureDrop": {
    "name": "SignatureDropImpl",
    "summary": "Setup a collection of NFTs where when it comes to minting, you can authorize some external party to mint tokens on your contract, and specify what exactly will be minted by that external party..\n\n",
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK(\"{{chainName}}\");\nconst contract = sdk.getSignatureDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "burn",
        "summary": "Burn a single NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const result = await contract.burnToken(tokenId);",
          "python": "",
          "go": "",
          "react": "const result = await contract.burnToken(tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.burn",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.burn"
        }
      },
      {
        "name": "claimTo",
        "summary": "Claim unique NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const { contract } = useContract(<ContractAddress>);\n  const {\n    mutate: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  if (error) {\n    console.error(\"failed to claim nft\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => claimNft({ to: \"0x...\", quantity: 1 })}\n    >\n      Claim NFT!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.claimto",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimnft"
        }
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of unique NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many unique NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT",
          "python": "",
          "go": "",
          "react": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.createbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.createbatch"
        }
      },
      {
        "name": "getAllClaimed",
        "summary": "Get All Claimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs (and their owners) that have been claimed in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;",
          "python": "",
          "go": "",
          "react": "const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.getallclaimed",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimednfts"
        }
      },
      {
        "name": "getAllUnclaimed",
        "summary": "Get All Unclaimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs that have been not been claimed yet in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;",
          "python": "",
          "go": "",
          "react": "const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(<YourERC721DropContractInstance>, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.getallunclaimed",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useunclaimednfts"
        }
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the claimed supply\n\n",
        "remarks": "\n\nGet the number of claimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);",
          "python": "",
          "go": "",
          "react": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.totalclaimedsupply",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useclaimednftsupply"
        }
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the unclaimed supply\n\n",
        "remarks": "\n\nGet the number of unclaimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);",
          "python": "",
          "go": "",
          "react": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.signaturedropimpl.totalunclaimedsupply",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useunclaimednftsupply"
        }
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst balance = await contract.balanceOf(walletAddress);\nconsole.log(balance);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownerBalance, isLoading, error } = useNFTBalance(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.balanceof",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenftbalance"
        }
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const tokenId = 0;\nconst nft = await contract.get(tokenId);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nft, isLoading, error } = useNFT(contract, <tokenId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.get",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenft"
        }
      },
      {
        "name": "getAll",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getall",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usenfts"
        }
      },
      {
        "name": "getOwned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);",
          "python": "",
          "go": "",
          "react": "const { contract } = useContract(<ContractAddress>);\nconst { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, <OwnerWalletAddress>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.getowned",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useownednfts"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);",
          "python": "",
          "go": "",
          "react": "const walletAddress = \"{{wallet_address}}\";\nconst tokenId = 0;\nawait contract.transfer(walletAddress, tokenId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.standarderc721.transfer"
        }
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst claimCondition = {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n};\nawait contract.claimConditions.set([claimCondition]);",
          "python": "",
          "go": "",
          "react": "const presaleStartTime = new Date();\nconst claimCondition = {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n};\nawait contract.claimConditions.set([claimCondition]);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.dropclaimconditions"
        }
      },
      {
        "name": "revealer",
        "summary": "Delayed reveal\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal"
        }
      },
      {
        "name": "royalties",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});",
          "python": "",
          "go": "",
          "react": "// royalties on the whole contract\ncontract.royalties.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalties.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroyalty",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroyalty"
        }
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted",
          "python": "",
          "go": "",
          "react": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.erc721withquantitysignaturemintable",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.erc721withquantitysignaturemintable"
        }
      }
    ],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.SignatureDropImpl"
    }
  },
  "SmartContract": {
    "name": "SmartContract",
    "summary": "",
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "WalletAuthenticator": {
    "name": "WalletAuthenticator",
    "summary": "Wallet Authenticator\n\n",
    "examples": {
      "javascript": "// We specify the domain of the application to authenticate to\nconst domain = \"example.com\"\n\n// On the client side, we can generate a payload for the connected wallet to login\nconst loginPayload = await sdk.auth.login(domain);\n\n// Then on the server side, we can securely verify the connected client-side address\nconst address = sdk.auth.verify(domain, loginPayload);\n\n// And we can also generate an authentication token to send to the client\nconst token = sdk.auth.generate(domain, loginPayload);\n\n// Finally, the token can be send from the client to the server to make authenticated requests\n// And the server can use the following function to authenticate a token and verify the associated address\nconst address = sdk.auth.authenticate(domain, token);",
      "python": "# We specify the domain of the application to authenticate to\ndomain = \"example.com\"\n\n# We can then generate a payload for the connected wallet to login\n# This can also be done on the client side with the thirdweb TypeScript SDK\npayload = sdk.auth.login(domain)\n\n# Then, on the server, we can securely verify the connected address that signed the payload\naddress = sdk.auth.verify(domain, payload)\n\n# And we can also generate an authentication token to send back to the original payload sender\ntoken = sdk.auth.generate_auth_token(domain, payload)\n\n# Finally, the token can be use dby the original payload sender to authenticate to the backend\n# And the server can use the following function to authenticate the token and verify the address\naddress = sdk.auth.authenticate(domain, token)",
      "go": "\n// First we specify the domain of the application to authenticate to\ndomain := \"example.com\"\n\n// We can then generate a payload for the connected wallet to login\n// This can also be done on the client side with the thirdweb TypeScript SDK\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Then, on the server, we can securely verify the connected address that signed the payload\naddress, err := sdk.Auth.Verify(domain, payload, nil)\n\n// And we can also generate an authentication token to send back to the original payload sender\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload, nil)\n\n// Finally, the token can be use dby the original payload sender to authenticate to the backend\n// And the server can use the following function to authenticate the token and verify the address\naddress, err := sdk.Auth.Authenticate(domain, token)\n"
    },
    "methods": [
      {
        "name": "authenticate",
        "summary": "Authenticate With Token\n\n",
        "remarks": "\n\nServer-side function that authenticates the provided JWT token. This function verifies that the provided authentication token is valid and returns the address of the authenticated wallet.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);\n\n// Authenticate the token and get the address of authenticating users wallet\nconst address = sdk.auth.authenticate(domain, token);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\ntoken = sdk.auth.generate_auth_token(domain, payload)\n\n# Authenticate the token and get the address of the authenticating wallet\naddress = sdk.auth.authenticate(domain, token)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain)\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload)\n\n// Authenticate the token and get the address of the authenticating wallet\naddress, err := sdk.Auth.Authenticate(domain, token)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);\n\n// Authenticate the token and get the address of authenticating users wallet\nconst address = sdk.auth.authenticate(domain, token);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.authenticate",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#authenticate",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-authenticate",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.authenticate"
        }
      },
      {
        "name": "generateAuthToken",
        "summary": "Generate Authentication Token\n\n",
        "remarks": "\n\nServer-side function that generates a JWT token from the provided login request that the client-side wallet can use to authenticate to the server-side application.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Generate a JWT token that can be sent to the client-side wallet and used for authentication\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\n\n# Generate an authentication token for the logged in wallet\ntoken = sdk.auth.generate_auth_token(domain, payload)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Generate an authentication token for the logged in wallet\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload, nil)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Generate a JWT token that can be sent to the client-side wallet and used for authentication\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.generateauthtoken",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#generate_auth_token",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-generateauthtoken",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.generateauthtoken"
        }
      },
      {
        "name": "login",
        "summary": "Login With Connected Wallet\n\n",
        "remarks": "\n\nClient-side function that allows the connected wallet to login to a server-side application. Generates a login payload that can be sent to the server-side for verification or authentication.\n\n",
        "examples": {
          "javascript": "// Add the domain of the application users will login to, this will be used throughout the login process\nconst domain = \"example.com\";\n// Generate a signed login payload for the connected wallet to authenticate with\nconst loginPayload = await sdk.auth.login(domain);",
          "python": "# Add the domain of the application that you want to log in to\ndomain = \"example.com\"\n\n# Generate a signed login payload for the connected wallet to authenticate with\npayload = sdk.auth.login(domain)",
          "go": "// Add the domain of the application that you want to log in to\ndomain := \"example.com\"\n\n// Generate a signed login payload for the connected wallet to authenticate with\npayload, err := sdk.Auth.Login(domain, nil)\n",
          "react": "const sdk = useSDK();\n\n// Add the domain of the application users will login to, this will be used throughout the login process\nconst domain = \"example.com\";\n// Generate a signed login payload for the connected wallet to authenticate with\nconst loginPayload = await sdk.auth.login(domain);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.login",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#login",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-login",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.login"
        }
      },
      {
        "name": "verify",
        "summary": "Verify Logged In Address\n\n",
        "remarks": "\n\nServer-side function to securely verify the address of the logged in client-side wallet by validating the provided client-side login request.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Verify the login request\nconst address = sdk.auth.verify(domain, loginPayload);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\n\n# Verify the login request\naddress = sdk.auth.verify(domain, payload)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Verify the login request\naddress, err := sdk.Auth.Verify(domain, payload, nil)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Verify the login request\nconst address = sdk.auth.verify(domain, loginPayload);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.verify",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#verify",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-verify",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.verify"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.WalletAuthenticator",
      "python": "https://docs.thirdweb.com/python/wallet-authenticator",
      "go": "https://docs.thirdweb.com/go/wallet_authenticator"
    }
  },
  "UserWallet": {
    "name": "UserWallet",
    "summary": "Connect and Interact with a user wallet\n\n",
    "examples": {
      "javascript": "const balance = await sdk.wallet.balance();"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Fetch the native or ERC20 token balance of this wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// native currency balance\nconst balance = await sdk.wallet.balance();\n// ERC20 token balance\nconst erc20balance = await sdk.wallet.balance(tokenContractAddress);\n",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// native currency balance\nconst balance = await sdk.wallet.balance();\n// ERC20 token balance\nconst erc20balance = await sdk.wallet.balance(tokenContractAddress);\n"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.balance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.balance"
        }
      },
      {
        "name": "getAddress",
        "summary": "Get the currently connected address\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = await sdk.wallet.getAddress();",
          "python": "",
          "go": "",
          "react": "import { useAddress } from \"@thirdweb-dev/react\"\n\nconst App = () => {\n  const address = useAddress()\n\n  return <div>{address}</div>\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.getaddress",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.useaddress"
        }
      },
      {
        "name": "recoverAddress",
        "summary": "Recover the signing address from a signed message\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const message = \"Sign this message...\";\nconst signature = await sdk.wallet.sign(message);\n\n// Now we can recover the signing address\nconst address = sdk.wallet.recoverAddress(message, signature);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst message = \"Sign this message...\";\nconst signature = await sdk.wallet.sign(message);\n\n// Now we can recover the signing address\nconst address = sdk.wallet.recoverAddress(message, signature);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.recoveraddress",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.recoveraddress"
        }
      },
      {
        "name": "sign",
        "summary": "Sign any message with the connected wallet private key\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// This is the message to be signed\nconst message = \"Sign this message...\";\n\n// Now we can sign the message with the connected wallet\nconst signature = await sdk.wallet.sign(message);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// This is the message to be signed\nconst message = \"Sign this message...\";\n\n// Now we can sign the message with the connected wallet\nconst signature = await sdk.wallet.sign(message);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.sign",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.sign"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer native or ERC20 tokens from this wallet to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": " // transfer 0.8 ETH\nawait sdk.wallet.transfer(\"0x...\", 0.8);\n // transfer 0.8 tokens of `tokenContractAddress`\nawait sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n // transfer 0.8 ETH\nawait sdk.wallet.transfer(\"0x...\", 0.8);\n // transfer 0.8 tokens of `tokenContractAddress`\nawait sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.transfer"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.UserWallet"
    }
  }
}