{
  "Deployer": {
    "name": "Deployer",
    "summary": "Deploy new programs\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\n// Instantiate the SDK and pass in a signer\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Define the metadata for your program\nconst metadata = {\n  name: \"NFT Contract\",\n  image: readFileSync(\"files/image.jpg\"),\n};\n\n// And deploy a new program from the connected wallet\nconst address = await sdk.deployer.createNftCollection(metadata);"
    },
    "methods": [
      {
        "name": "createNftCollection",
        "summary": "Create a new NFT collection program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"NFT\",\n  symbol: \"NFT\",\n};\n\nconst address = await sdk.deployer.createNftCollection(metadata);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Deployer.createNftCollection"
      },
      {
        "name": "createNftDrop",
        "summary": "Create a new NFT drop program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"NFT\",\n  symbol: \"NFT\",\n  price: 0,\n  sellerFeeBasisPoints: 0,\n  itemsAvailable: 5,\n};\n\nconst address = await sdk.deployer.createNftDrop(metadata);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Deployer.createNftDrop"
      },
      {
        "name": "createToken",
        "summary": "Create a new token program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = {\n  name: \"Token\",\n  symbol: \"TKN\",\n  initialSupply: 100,\n};\n\nconst address = await sdk.deployer.createToken(metadata);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Deployer.createToken"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.Deployer"
  },
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "A collection of associated NFTs\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your NFT collection program\nconst program = await sdk.getNFTCollection(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the NFT balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The mint address of the NFT to check the balance of\nconst mintAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(mintAddress);\nconsole.log(balance);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.balance"
      },
      {
        "name": "balanceOf",
        "summary": "Get the NFT balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address of the wallet to get the balance of\nconst walletAddress = \"...\"\n// Specify the mint address of the NFT to get the balance of\nconst mintAddress = \"...\"\nconst balance = await program.balanceOf(walletAddress, mintAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.balanceOf"
      },
      {
        "name": "burn",
        "summary": "Burn an NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address of the NFT to burn\nconst nftAddress = \"...\"\n// And send the actual burn transaction\nconst tx = await program.burn(nftAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.burn"
      },
      {
        "name": "get",
        "summary": "Get the metadata for a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\n\nconsole.log(nft.name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.get"
      },
      {
        "name": "getAll",
        "summary": "Get the metadata for all NFTs on this collection\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get all the NFTs that have been minted on this contract\nconst nfts = await program.getAll();\n\nconsole.log(nfts[0].name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.getAll"
      },
      {
        "name": "getAllNFTAddresses",
        "summary": "Get the mint addresses for all NFTs on this collection\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get just the addresses of the minted NFTs on this contract\nconst nfts = await program.getAllNFTAddresses();\n\nconsole.log(nfts);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.getAllNFTAddresses"
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata.name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.getMetadata"
      },
      {
        "name": "mint",
        "summary": "Mint NFTs to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Add the metadata of your NFT\nconst metadata = {\n  name: \"NFT #1\",\n  description: \"My first NFT!\",\n  image: readFileSync(\"files/image.jpg\"),\n  properties: [\n    {\n       name: \"coolness\",\n       value: \"very cool!\"\n    }\n  ]\n}\n\n// Then mint the new NFT and get its address\nconst address = await program.mint(metadata);\nconsole.log(address);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.mint"
      },
      {
        "name": "mintAdditionalSupply",
        "summary": "Mint additional supply of an NFT to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The address of the already minted NFT\nconst nftAddress = \"...\"\n// Mint an additional NFT of the original NFT\nconst address = await program.mintAdditionalSupply(nftAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.mintAdditionalSupply"
      },
      {
        "name": "mintAdditionalSupplyTo",
        "summary": "Mint additional supply of an NFT to the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify who to mint the additional NFT to\nconst to = \"...\"\n// The address of the already minted NFT\nconst nftAddress = \"...\"\n// Mint an additional NFT of the original NFT\nconst address = await program.mintAdditionalSupplyTo(to, nftAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.mintAdditionalSupplyTo"
      },
      {
        "name": "mintTo",
        "summary": "Mint an NFT to the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify who to mint the NFT to\nconst to = \"...\";\n\n// Add the metadata of your NFT\nconst metadata = {\n  name: \"NFT #1\",\n  description: \"My first NFT!\",\n  image: readFileSync(\"files/image.jpg\"),\n  properties: [\n    {\n       name: \"coolness\",\n       value: \"very cool!\"\n    }\n  ]\n}\n\n// Then mint the new NFT and get its address\nconst address = await program.mintTo(to, metadata);\nconsole.log(address);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.mintTo"
      },
      {
        "name": "supplyOf",
        "summary": "Get the supply of NFT editions minted from a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = \"...\";\nconst supply = await program.supplyOf(addres);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.supplyOf"
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified NFTs to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The wallet address to transfer the NFTs to\nconst to = \"...\";\n// The mint address of the NFT to transfer\nconst mintAddress = \"...\";\nconst tx = await program.transfer(to, mintAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection.transfer"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.NFTCollection"
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "A collection of NFTs that can be lazy minted and claimed\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your NFT Drop program\nconst program = await sdk.getNFTDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the NFT balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The mint address of the NFT to check the balance of\nconst mintAddress = \"...\"\n// Get the NFT balance of the currently connected wallet\nconst balance = await program.balance(mintAddress);\nconsole.log(balance);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.balance"
      },
      {
        "name": "balanceOf",
        "summary": "Get the NFT balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The address of the wallet to check the balance of\nconst walletAddress = \"...\"\n// The mint address of the NFT to check the balance of\nconst mintAddress = \"...\"\n// Get the actual NFT balance of the specified wallet\nconst balance = await program.balanceOf(walletAddress, mintAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.balanceOf"
      },
      {
        "name": "claim",
        "summary": "Claim an NFT from the drop with connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the quantity of NFTs to claim\nconst quantity = 1;\n// Claim NFTs and get their mint addresses\nconst claimedAddresses = await program.claim(quantity);\nconsole.log(\"Claimed NFT at address\", claimedAddresses[0]);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.claim"
      },
      {
        "name": "claimTo",
        "summary": "Claim an NFT from the drop for the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify which address to claim the NFTs to\nconst receiverAddress =  \"...\";\n// Claim the NFTs to the specified wallet and get the mint addresses of the NFTs\nconst claimedAddresses = await program.claimTo(receiverAddress, 1);\nconsole.log(\"Claimed NFT at address\", claimedAddresses[0]);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.claimTo"
      },
      {
        "name": "get",
        "summary": "Get the metadata for a specific NFT\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the mint address of the NFT to get the data of\nconst nftAddress = \"...\";\n// And get the data for the NFT\nconst nft = await program.get(nftAddress);\n\nconsole.log(nft.name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.get"
      },
      {
        "name": "getAll",
        "summary": "Get the metadata for all NFTs on this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get all the NFTs that have been minted on this contract\nconst nfts = await program.getAll();\n\nconsole.log(nfts[0].name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.getAll"
      },
      {
        "name": "getAllClaimed",
        "summary": "Get the metadata for all the claimed NFTs on this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get all the NFTs that have already been claimed from this drop\nconst nfts = await program.getAllClaimed();\nconsole.log(nfts[0].name)"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.getAllClaimed"
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this program.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata.name);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.getMetadata"
      },
      {
        "name": "lazyMint",
        "summary": "Lazy mint NFTs to be claimed later\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Add the metadata of your NFTs\nconst metadata = [\n  {\n    name: \"NFT #1\",\n    description: \"My first NFT!\",\n    image: readFileSync(\"files/image.jpg\"),\n    properties: [\n      {\n        name: \"coolness\",\n        value: \"very cool!\"\n      }\n    ]\n  }\n];\n\n// And lazy mint NFTs to your program\nconst tx = await program.lazyMint(metadatas);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.lazyMint"
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the total claimed supply of this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the total number of lazy minted NFTs that have already been claimed\nconst supply = await program.totalClaimedSupply();"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.totalClaimedSupply"
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the total unclaimed supply of this drop\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the total number of lazy minted NFTs that aren't yet claimed\nconst supply = await program.totalUnclaimedSupply();"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.totalUnclaimedSupply"
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified NFTs to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The wallet address to transfer the NFTs to\nconst to = \"...\";\n// The mint address of the NFT to transfer\nconst mintAddress = \"...\";\nconst tx = await program.transfer(to, mintAddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop.transfer"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.NFTDrop"
  },
  "Program": {
    "name": "Program",
    "summary": "Dynamic interface for interacting with Solana programs.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your program\nconst program = await sdk.getProgram(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "call",
        "summary": "Call a function on this program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const counterAccount = Keypair.generate();\nawait program.call(\"increment\", {\n  // We need to pass in the public keys of any accounts to interact with\n  accounts: {\n    counterAccount: counterAccount.publicKey.toBase58(),\n  },\n  // As well as the arguments to pass to the data parameters\n  data: [\"...\"],\n  // And the signer of the account that will be signing the message\n  signers: [counterAccount]\n})"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Program.call"
      },
      {
        "name": "fetch",
        "summary": "Read account data associated with this program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const accountAddress = \"...\";\n// Get the counterAccount at specified address\nconst counterAccount = await program.fetch(\"counterAccount\", accountaddress);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Program.fetch"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.Program"
  },
  "ThirdwebSDK": {
    "name": "ThirdwebSDK",
    "summary": "The main entry-point for the thirdweb Solana SDK.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\n// Create SDK on specified network, and then pass a signer\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\n// Signer can be a keypair or browser wallet adapter\nsdk.wallet.connect(signer);"
    },
    "methods": [
      {
        "name": "getProgram",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Get the interface for your anchor program\nconst program = await sdk.getProgram(\"{{contract_address}}\");"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.ThirdwebSDK.getProgram"
      },
      {
        "name": "getProgramWithIdl",
        "summary": "Get an SDK interface for a deployed program\n\n",
        "remarks": null,
        "examples": {
          "javascript": "import idl from \"path/to/idl.json\"\n\n// Alternatively, you can pass in your own IDL\nconst program = await sdk.getProgramWithIdl(address, idl);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.ThirdwebSDK.getProgramWithIdl"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.ThirdwebSDK"
  },
  "Token": {
    "name": "Token",
    "summary": "Standard token or cryptocurrency.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk/solana\";\n\nconst sdk = ThirdwebSDK.fromNetwork(\"devnet\");\nsdk.wallet.connect(signer);\n\n// Get the interface for your token program\nconst program = await sdk.getToken(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Get the token balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await program.balance();\nconsole.log(balance.displayValue);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.balance"
      },
      {
        "name": "balanceOf",
        "summary": "Get the token balance of the specified wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = \"...\"\nconst balance = await program.balanceOf(address);\nconsole.log(balance.displayValue);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.balanceOf"
      },
      {
        "name": "getMetadata",
        "summary": "Get the metadata for this token including the name, supply, and decimals.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const metadata = await program.getMetadata();\nconsole.log(metadata.supply);\nconsole.log(metadata.decimals);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.getMetadata"
      },
      {
        "name": "mint",
        "summary": "Mints the specified amount of new tokens to the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the amount of tokens to mint\nconst amount = 1;\n// And then you can mint the tokens\nconst tx = await program.mint(amount);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.mint"
      },
      {
        "name": "mintTo",
        "summary": "Mints the specified amount of new tokens to a specific wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address to mint tokens to\nconst address = \"{{wallet_address}}\"\";\n// And the amount of tokens to mint\nconst amount = 1;\n// And then you can make a mint transaction\nconst tx = await program.mintTo(address, 1);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.mintTo"
      },
      {
        "name": "totalSupply",
        "summary": "Get the total minted supply of this token\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const supply = await program.totalSupply();"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.totalSupply"
      },
      {
        "name": "transfer",
        "summary": "Transfer the specified amount of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Specify the address to transfer tokens to\nconst to = \"...\";\n// And the amount of tokens to transfer\nconst amount = 1;\n// And then you can make the transfer transaction\nconst tx = await program.transfer(to, amount);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.Token.transfer"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.Token"
  },
  "UserWallet": {
    "name": "UserWallet",
    "summary": "Handle and view info about the wallet connected to the SDK.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "// Connect a wallet to the SDK, pass in a keypair or browser wallet adapter\nsdk.wallet.connect(signer)\n\n// Then you can read data about the connected wallet\nconst address = sdk.wallet.getAddress();"
    },
    "methods": [
      {
        "name": "connect",
        "summary": "Connect a signer to the SDK. Can pass in a keypair or browser wallet adapter\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const signer = Keypair.generate();\nsdk.wallet.connect(signer);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet.connect"
      },
      {
        "name": "disconnect",
        "summary": "Disconnect the connect wallet from the SDK\n\n",
        "remarks": null,
        "examples": {
          "javascript": "sdk.wallet.disconnect();"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet.disconnect"
      },
      {
        "name": "getAddress",
        "summary": "Get the address of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = sdk.wallet.getAddress()"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet.getAddress"
      },
      {
        "name": "getBalance",
        "summary": "Get the native balance of the connected wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await sdk.wallet.getBalance();\nconsole.log(balance.displayValue);"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet.getBalance"
      },
      {
        "name": "getSigner",
        "summary": "Get the connected signer\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const signer = sdk.wallet.getSigner()"
        },
        "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet.getSigner"
      }
    ],
    "properties": [],
    "reference": "https://portal.thirdweb.com/typescript/sdk.UserWallet"
  }
}